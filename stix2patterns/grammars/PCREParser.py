# Generated from PCRE.g4 by ANTLR 4.5.3
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\177\u0397\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4")
        buf.write(u"\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r")
        buf.write(u"\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22")
        buf.write(u"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4")
        buf.write(u"\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35")
        buf.write(u"\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4")
        buf.write(u"$\t$\4%\t%\3\2\3\2\3\2\7\2N\n\2\f\2\16\2Q\13\2\3\3\7")
        buf.write(u"\3T\n\3\f\3\16\3W\13\3\3\4\3\4\5\4[\n\4\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5u\n\5\3\6\3\6\3\6\5")
        buf.write(u"\6z\n\6\3\7\3\7\3\7\3\7\3\7\6\7\u0081\n\7\r\7\16\7\u0082")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u008b\n\7\f\7\16\7\u008e")
        buf.write(u"\13\7\3\7\3\7\3\7\3\7\6\7\u0094\n\7\r\7\16\7\u0095\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\6\7\u009e\n\7\r\7\16\7\u009f\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\7\7\u00a7\n\7\f\7\16\7\u00aa\13\7")
        buf.write(u"\3\7\3\7\3\7\6\7\u00af\n\7\r\7\16\7\u00b0\3\7\3\7\5\7")
        buf.write(u"\u00b5\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\5\b\u00e0\n\b\3\t\3\t\3\t\5\t\u00e5")
        buf.write(u"\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\5\n\u0104\n\n\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\5\13\u0118\n\13\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write(u"\r\3\r\3\r\5\r\u0156\n\r\3\16\6\16\u0159\n\16\r\16\16")
        buf.write(u"\16\u015a\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0179")
        buf.write(u"\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write(u"\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write(u"\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write(u"\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write(u"\21\3\21\3\21\3\21\3\21\3\21\5\21\u01c9\n\21\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01d3\n\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22")
        buf.write(u"\u01e0\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\5\22\u01ed\n\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01fb\n\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\5\22\u0209\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\5\22\u0216\n\22\3\22\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0222\n\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\5\22\u0230\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0241")
        buf.write(u"\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\5\22\u0252\n\22\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u025e\n")
        buf.write(u"\22\3\22\3\22\5\22\u0262\n\22\3\23\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5")
        buf.write(u"\23\u0273\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23")
        buf.write(u"\u027c\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\5\23\u02c8\n\23\3\24\3\24\3\24\3\24\3\24")
        buf.write(u"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write(u"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write(u"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\3\24\5\24\u0307\n\24\3\25\3\25\3\25\3\25")
        buf.write(u"\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0313\n\25\3\26\3")
        buf.write(u"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write(u"\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write(u"\26\3\26\3\26\3\26\5\26\u032f\n\26\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\3\27\3\27\5\27\u0338\n\27\3\30\3\30\3\31\3\31\5")
        buf.write(u"\31\u033e\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write(u"\3\32\3\32\3\32\3\32\5\32\u034c\n\32\3\33\3\33\3\33\3")
        buf.write(u"\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write(u"\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write(u"\33\3\33\5\33\u0368\n\33\3\34\3\34\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\5\35\u0375\n\35\3\36\3\36\3")
        buf.write(u"\37\6\37\u037a\n\37\r\37\16\37\u037b\3 \3 \3!\3!\3\"")
        buf.write(u"\3\"\5\"\u0384\n\"\3\"\3\"\3\"\7\"\u0389\n\"\f\"\16\"")
        buf.write(u"\u038c\13\"\3#\6#\u038f\n#\r#\16#\u0390\3$\3$\3%\3%\3")
        buf.write(u"%\2\2&\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*")
        buf.write(u",.\60\62\64\668:<>@BDFH\2\t\b\2IIMMSSXXddoo\5\2\6\6\20")
        buf.write(u"\35#$\4\2uw~~\4\2u{~~\3\2u~\3\2\67\67\3\2At\u041b\2J")
        buf.write(u"\3\2\2\2\4U\3\2\2\2\6X\3\2\2\2\bt\3\2\2\2\ny\3\2\2\2")
        buf.write(u"\f\u00b4\3\2\2\2\16\u00df\3\2\2\2\20\u00e4\3\2\2\2\22")
        buf.write(u"\u0103\3\2\2\2\24\u0117\3\2\2\2\26\u0119\3\2\2\2\30\u0155")
        buf.write(u"\3\2\2\2\32\u0158\3\2\2\2\34\u015c\3\2\2\2\36\u0178\3")
        buf.write(u"\2\2\2 \u01c8\3\2\2\2\"\u0261\3\2\2\2$\u02c7\3\2\2\2")
        buf.write(u"&\u0306\3\2\2\2(\u0312\3\2\2\2*\u032e\3\2\2\2,\u0337")
        buf.write(u"\3\2\2\2.\u0339\3\2\2\2\60\u033d\3\2\2\2\62\u034b\3\2")
        buf.write(u"\2\2\64\u0367\3\2\2\2\66\u0369\3\2\2\28\u0374\3\2\2\2")
        buf.write(u":\u0376\3\2\2\2<\u0379\3\2\2\2>\u037d\3\2\2\2@\u037f")
        buf.write(u"\3\2\2\2B\u0383\3\2\2\2D\u038e\3\2\2\2F\u0392\3\2\2\2")
        buf.write(u"H\u0394\3\2\2\2JO\5\4\3\2KL\7\65\2\2LN\5\4\3\2MK\3\2")
        buf.write(u"\2\2NQ\3\2\2\2OM\3\2\2\2OP\3\2\2\2P\3\3\2\2\2QO\3\2\2")
        buf.write(u"\2RT\5\6\4\2SR\3\2\2\2TW\3\2\2\2US\3\2\2\2UV\3\2\2\2")
        buf.write(u"V\5\3\2\2\2WU\3\2\2\2XZ\5*\26\2Y[\5\b\5\2ZY\3\2\2\2Z")
        buf.write(u"[\3\2\2\2[\7\3\2\2\2\\]\7%\2\2]u\5\n\6\2^_\7&\2\2_u\5")
        buf.write(u"\n\6\2`a\7\'\2\2au\5\n\6\2bc\7(\2\2cd\5\66\34\2de\7)")
        buf.write(u"\2\2ef\5\n\6\2fu\3\2\2\2gh\7(\2\2hi\5\66\34\2ij\7*\2")
        buf.write(u"\2jk\7)\2\2kl\5\n\6\2lu\3\2\2\2mn\7(\2\2no\5\66\34\2")
        buf.write(u"op\7*\2\2pq\5\66\34\2qr\7)\2\2rs\5\n\6\2su\3\2\2\2t\\")
        buf.write(u"\3\2\2\2t^\3\2\2\2t`\3\2\2\2tb\3\2\2\2tg\3\2\2\2tm\3")
        buf.write(u"\2\2\2u\t\3\2\2\2vz\7&\2\2wz\7%\2\2xz\3\2\2\2yv\3\2\2")
        buf.write(u"\2yw\3\2\2\2yx\3\2\2\2z\13\3\2\2\2{|\7\37\2\2|}\7!\2")
        buf.write(u"\2}~\7 \2\2~\u0080\7\"\2\2\177\u0081\5,\27\2\u0080\177")
        buf.write(u"\3\2\2\2\u0081\u0082\3\2\2\2\u0082\u0080\3\2\2\2\u0082")
        buf.write(u"\u0083\3\2\2\2\u0083\u0084\3\2\2\2\u0084\u0085\7 \2\2")
        buf.write(u"\u0085\u00b5\3\2\2\2\u0086\u0087\7\37\2\2\u0087\u0088")
        buf.write(u"\7!\2\2\u0088\u008c\7 \2\2\u0089\u008b\5,\27\2\u008a")
        buf.write(u"\u0089\3\2\2\2\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2")
        buf.write(u"\2\u008c\u008d\3\2\2\2\u008d\u008f\3\2\2\2\u008e\u008c")
        buf.write(u"\3\2\2\2\u008f\u00b5\7 \2\2\u0090\u0091\7\37\2\2\u0091")
        buf.write(u"\u0093\7!\2\2\u0092\u0094\5,\27\2\u0093\u0092\3\2\2\2")
        buf.write(u"\u0094\u0095\3\2\2\2\u0095\u0093\3\2\2\2\u0095\u0096")
        buf.write(u"\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u0098\7 \2\2\u0098")
        buf.write(u"\u00b5\3\2\2\2\u0099\u009a\7\37\2\2\u009a\u009b\7 \2")
        buf.write(u"\2\u009b\u009d\7\"\2\2\u009c\u009e\5,\27\2\u009d\u009c")
        buf.write(u"\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u009d\3\2\2\2\u009f")
        buf.write(u"\u00a0\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a2\7 \2\2")
        buf.write(u"\u00a2\u00b5\3\2\2\2\u00a3\u00a4\7\37\2\2\u00a4\u00a8")
        buf.write(u"\7 \2\2\u00a5\u00a7\5,\27\2\u00a6\u00a5\3\2\2\2\u00a7")
        buf.write(u"\u00aa\3\2\2\2\u00a8\u00a6\3\2\2\2\u00a8\u00a9\3\2\2")
        buf.write(u"\2\u00a9\u00ab\3\2\2\2\u00aa\u00a8\3\2\2\2\u00ab\u00b5")
        buf.write(u"\7 \2\2\u00ac\u00ae\7\37\2\2\u00ad\u00af\5,\27\2\u00ae")
        buf.write(u"\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ae\3\2\2")
        buf.write(u"\2\u00b0\u00b1\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b3")
        buf.write(u"\7 \2\2\u00b3\u00b5\3\2\2\2\u00b4{\3\2\2\2\u00b4\u0086")
        buf.write(u"\3\2\2\2\u00b4\u0090\3\2\2\2\u00b4\u0099\3\2\2\2\u00b4")
        buf.write(u"\u00a3\3\2\2\2\u00b4\u00ac\3\2\2\2\u00b5\r\3\2\2\2\u00b6")
        buf.write(u"\u00e0\5\20\t\2\u00b7\u00b8\7\63\2\2\u00b8\u00e0\5\66")
        buf.write(u"\34\2\u00b9\u00ba\7\63\2\2\u00ba\u00bb\7(\2\2\u00bb\u00bc")
        buf.write(u"\5\66\34\2\u00bc\u00bd\7)\2\2\u00bd\u00e0\3\2\2\2\u00be")
        buf.write(u"\u00bf\7\63\2\2\u00bf\u00c0\7(\2\2\u00c0\u00c1\7\"\2")
        buf.write(u"\2\u00c1\u00c2\5\66\34\2\u00c2\u00c3\7)\2\2\u00c3\u00e0")
        buf.write(u"\3\2\2\2\u00c4\u00c5\7\64\2\2\u00c5\u00c6\78\2\2\u00c6")
        buf.write(u"\u00c7\5@!\2\u00c7\u00c8\79\2\2\u00c8\u00e0\3\2\2\2\u00c9")
        buf.write(u"\u00ca\7\64\2\2\u00ca\u00cb\7:\2\2\u00cb\u00cc\5@!\2")
        buf.write(u"\u00cc\u00cd\7:\2\2\u00cd\u00e0\3\2\2\2\u00ce\u00cf\7")
        buf.write(u"\63\2\2\u00cf\u00d0\7(\2\2\u00d0\u00d1\5@!\2\u00d1\u00d2")
        buf.write(u"\7)\2\2\u00d2\u00e0\3\2\2\2\u00d3\u00d4\7\64\2\2\u00d4")
        buf.write(u"\u00d5\7(\2\2\u00d5\u00d6\5@!\2\u00d6\u00d7\7)\2\2\u00d7")
        buf.write(u"\u00e0\3\2\2\2\u00d8\u00d9\7\66\2\2\u00d9\u00da\7%\2")
        buf.write(u"\2\u00da\u00db\7j\2\2\u00db\u00dc\7>\2\2\u00dc\u00dd")
        buf.write(u"\5@!\2\u00dd\u00de\7\67\2\2\u00de\u00e0\3\2\2\2\u00df")
        buf.write(u"\u00b6\3\2\2\2\u00df\u00b7\3\2\2\2\u00df\u00b9\3\2\2")
        buf.write(u"\2\u00df\u00be\3\2\2\2\u00df\u00c4\3\2\2\2\u00df\u00c9")
        buf.write(u"\3\2\2\2\u00df\u00ce\3\2\2\2\u00df\u00d3\3\2\2\2\u00df")
        buf.write(u"\u00d8\3\2\2\2\u00e0\17\3\2\2\2\u00e1\u00e5\58\35\2\u00e2")
        buf.write(u"\u00e3\7\f\2\2\u00e3\u00e5\5> \2\u00e4\u00e1\3\2\2\2")
        buf.write(u"\u00e4\u00e2\3\2\2\2\u00e5\21\3\2\2\2\u00e6\u00e7\7\66")
        buf.write(u"\2\2\u00e7\u00e8\7%\2\2\u00e8\u00e9\78\2\2\u00e9\u00ea")
        buf.write(u"\5@!\2\u00ea\u00eb\79\2\2\u00eb\u00ec\5\2\2\2\u00ec\u00ed")
        buf.write(u"\7\67\2\2\u00ed\u0104\3\2\2\2\u00ee\u00ef\7\66\2\2\u00ef")
        buf.write(u"\u00f0\7%\2\2\u00f0\u00f1\7:\2\2\u00f1\u00f2\5@!\2\u00f2")
        buf.write(u"\u00f3\7:\2\2\u00f3\u00f4\5\2\2\2\u00f4\u00f5\7\67\2")
        buf.write(u"\2\u00f5\u0104\3\2\2\2\u00f6\u00f7\7\66\2\2\u00f7\u00f8")
        buf.write(u"\7%\2\2\u00f8\u00f9\7j\2\2\u00f9\u00fa\78\2\2\u00fa\u00fb")
        buf.write(u"\5@!\2\u00fb\u00fc\79\2\2\u00fc\u00fd\5\2\2\2\u00fd\u00fe")
        buf.write(u"\7\67\2\2\u00fe\u0104\3\2\2\2\u00ff\u0100\7\66\2\2\u0100")
        buf.write(u"\u0101\5\2\2\2\u0101\u0102\7\67\2\2\u0102\u0104\3\2\2")
        buf.write(u"\2\u0103\u00e6\3\2\2\2\u0103\u00ee\3\2\2\2\u0103\u00f6")
        buf.write(u"\3\2\2\2\u0103\u00ff\3\2\2\2\u0104\23\3\2\2\2\u0105\u0106")
        buf.write(u"\7\66\2\2\u0106\u0107\7%\2\2\u0107\u0108\7<\2\2\u0108")
        buf.write(u"\u0109\5\2\2\2\u0109\u010a\7\67\2\2\u010a\u0118\3\2\2")
        buf.write(u"\2\u010b\u010c\7\66\2\2\u010c\u010d\7%\2\2\u010d\u010e")
        buf.write(u"\7\65\2\2\u010e\u010f\5\2\2\2\u010f\u0110\7\67\2\2\u0110")
        buf.write(u"\u0118\3\2\2\2\u0111\u0112\7\66\2\2\u0112\u0113\7%\2")
        buf.write(u"\2\u0113\u0114\79\2\2\u0114\u0115\5\2\2\2\u0115\u0116")
        buf.write(u"\7\67\2\2\u0116\u0118\3\2\2\2\u0117\u0105\3\2\2\2\u0117")
        buf.write(u"\u010b\3\2\2\2\u0117\u0111\3\2\2\2\u0118\25\3\2\2\2\u0119")
        buf.write(u"\u011a\7\66\2\2\u011a\u011b\7%\2\2\u011b\u011c\7=\2\2")
        buf.write(u"\u011c\u011d\5D#\2\u011d\u011e\7\67\2\2\u011e\27\3\2")
        buf.write(u"\2\2\u011f\u0120\7\66\2\2\u0120\u0121\7%\2\2\u0121\u0122")
        buf.write(u"\5\32\16\2\u0122\u0123\7\"\2\2\u0123\u0124\5\32\16\2")
        buf.write(u"\u0124\u0125\7\67\2\2\u0125\u0156\3\2\2\2\u0126\u0127")
        buf.write(u"\7\66\2\2\u0127\u0128\7%\2\2\u0128\u0129\5\32\16\2\u0129")
        buf.write(u"\u012a\7\67\2\2\u012a\u0156\3\2\2\2\u012b\u012c\7\66")
        buf.write(u"\2\2\u012c\u012d\7%\2\2\u012d\u012e\7\"\2\2\u012e\u012f")
        buf.write(u"\5\32\16\2\u012f\u0130\7\67\2\2\u0130\u0156\3\2\2\2\u0131")
        buf.write(u"\u0132\7\66\2\2\u0132\u0133\7\'\2\2\u0133\u0134\7h\2")
        buf.write(u"\2\u0134\u0135\7i\2\2\u0135\u0136\7;\2\2\u0136\u0137")
        buf.write(u"\7m\2\2\u0137\u0138\7n\2\2\u0138\u0139\7[\2\2\u0139\u013a")
        buf.write(u"\7l\2\2\u013a\u013b\7n\2\2\u013b\u013c\7;\2\2\u013c\u013d")
        buf.write(u"\7i\2\2\u013d\u013e\7j\2\2\u013e\u013f\7n\2\2\u013f\u0156")
        buf.write(u"\7\67\2\2\u0140\u0141\7\66\2\2\u0141\u0142\7\'\2\2\u0142")
        buf.write(u"\u0143\7o\2\2\u0143\u0144\7n\2\2\u0144\u0145\7`\2\2\u0145")
        buf.write(u"\u0146\7|\2\2\u0146\u0156\7\67\2\2\u0147\u0148\7\66\2")
        buf.write(u"\2\u0148\u0149\7\'\2\2\u0149\u014a\7o\2\2\u014a\u014b")
        buf.write(u"\7n\2\2\u014b\u014c\7`\2\2\u014c\u014d\7u\2\2\u014d\u014e")
        buf.write(u"\7z\2\2\u014e\u0156\7\67\2\2\u014f\u0150\7\66\2\2\u0150")
        buf.write(u"\u0151\7\'\2\2\u0151\u0152\7o\2\2\u0152\u0153\7]\2\2")
        buf.write(u"\u0153\u0154\7j\2\2\u0154\u0156\7\67\2\2\u0155\u011f")
        buf.write(u"\3\2\2\2\u0155\u0126\3\2\2\2\u0155\u012b\3\2\2\2\u0155")
        buf.write(u"\u0131\3\2\2\2\u0155\u0140\3\2\2\2\u0155\u0147\3\2\2")
        buf.write(u"\2\u0155\u014f\3\2\2\2\u0156\31\3\2\2\2\u0157\u0159\5")
        buf.write(u"\34\17\2\u0158\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a")
        buf.write(u"\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\33\3\2\2\2\u015c")
        buf.write(u"\u015d\t\2\2\2\u015d\35\3\2\2\2\u015e\u015f\7\66\2\2")
        buf.write(u"\u015f\u0160\7%\2\2\u0160\u0161\7>\2\2\u0161\u0162\5")
        buf.write(u"\2\2\2\u0162\u0163\7\67\2\2\u0163\u0179\3\2\2\2\u0164")
        buf.write(u"\u0165\7\66\2\2\u0165\u0166\7%\2\2\u0166\u0167\7?\2\2")
        buf.write(u"\u0167\u0168\5\2\2\2\u0168\u0169\7\67\2\2\u0169\u0179")
        buf.write(u"\3\2\2\2\u016a\u016b\7\66\2\2\u016b\u016c\7%\2\2\u016c")
        buf.write(u"\u016d\78\2\2\u016d\u016e\7>\2\2\u016e\u016f\5\2\2\2")
        buf.write(u"\u016f\u0170\7\67\2\2\u0170\u0179\3\2\2\2\u0171\u0172")
        buf.write(u"\7\66\2\2\u0172\u0173\7%\2\2\u0173\u0174\78\2\2\u0174")
        buf.write(u"\u0175\7?\2\2\u0175\u0176\5\2\2\2\u0176\u0177\7\67\2")
        buf.write(u"\2\u0177\u0179\3\2\2\2\u0178\u015e\3\2\2\2\u0178\u0164")
        buf.write(u"\3\2\2\2\u0178\u016a\3\2\2\2\u0178\u0171\3\2\2\2\u0179")
        buf.write(u"\37\3\2\2\2\u017a\u017b\7\66\2\2\u017b\u017c\7%\2\2\u017c")
        buf.write(u"\u017d\7l\2\2\u017d\u01c9\7\67\2\2\u017e\u017f\7\66\2")
        buf.write(u"\2\u017f\u0180\7%\2\2\u0180\u0181\5\66\34\2\u0181\u0182")
        buf.write(u"\7\67\2\2\u0182\u01c9\3\2\2\2\u0183\u0184\7\66\2\2\u0184")
        buf.write(u"\u0185\7%\2\2\u0185\u0186\7&\2\2\u0186\u0187\5\66\34")
        buf.write(u"\2\u0187\u0188\7\67\2\2\u0188\u01c9\3\2\2\2\u0189\u018a")
        buf.write(u"\7\66\2\2\u018a\u018b\7%\2\2\u018b\u018c\7\"\2\2\u018c")
        buf.write(u"\u018d\5\66\34\2\u018d\u018e\7\67\2\2\u018e\u01c9\3\2")
        buf.write(u"\2\2\u018f\u0190\7\66\2\2\u0190\u0191\7%\2\2\u0191\u0192")
        buf.write(u"\7@\2\2\u0192\u0193\5@!\2\u0193\u0194\7\67\2\2\u0194")
        buf.write(u"\u01c9\3\2\2\2\u0195\u0196\7\66\2\2\u0196\u0197\7%\2")
        buf.write(u"\2\u0197\u0198\7j\2\2\u0198\u0199\79\2\2\u0199\u019a")
        buf.write(u"\5@!\2\u019a\u019b\7\67\2\2\u019b\u01c9\3\2\2\2\u019c")
        buf.write(u"\u019d\7\63\2\2\u019d\u019e\78\2\2\u019e\u019f\5@!\2")
        buf.write(u"\u019f\u01a0\79\2\2\u01a0\u01c9\3\2\2\2\u01a1\u01a2\7")
        buf.write(u"\63\2\2\u01a2\u01a3\7:\2\2\u01a3\u01a4\5@!\2\u01a4\u01a5")
        buf.write(u"\7:\2\2\u01a5\u01c9\3\2\2\2\u01a6\u01a7\7\63\2\2\u01a7")
        buf.write(u"\u01a8\78\2\2\u01a8\u01a9\5\66\34\2\u01a9\u01aa\79\2")
        buf.write(u"\2\u01aa\u01c9\3\2\2\2\u01ab\u01ac\7\63\2\2\u01ac\u01ad")
        buf.write(u"\7:\2\2\u01ad\u01ae\5\66\34\2\u01ae\u01af\7:\2\2\u01af")
        buf.write(u"\u01c9\3\2\2\2\u01b0\u01b1\7\63\2\2\u01b1\u01b2\78\2")
        buf.write(u"\2\u01b2\u01b3\7&\2\2\u01b3\u01b4\5\66\34\2\u01b4\u01b5")
        buf.write(u"\79\2\2\u01b5\u01c9\3\2\2\2\u01b6\u01b7\7\63\2\2\u01b7")
        buf.write(u"\u01b8\7:\2\2\u01b8\u01b9\7&\2\2\u01b9\u01ba\5\66\34")
        buf.write(u"\2\u01ba\u01bb\7:\2\2\u01bb\u01c9\3\2\2\2\u01bc\u01bd")
        buf.write(u"\7\63\2\2\u01bd\u01be\78\2\2\u01be\u01bf\7\"\2\2\u01bf")
        buf.write(u"\u01c0\5\66\34\2\u01c0\u01c1\79\2\2\u01c1\u01c9\3\2\2")
        buf.write(u"\2\u01c2\u01c3\7\63\2\2\u01c3\u01c4\7:\2\2\u01c4\u01c5")
        buf.write(u"\7\"\2\2\u01c5\u01c6\5\66\34\2\u01c6\u01c7\7:\2\2\u01c7")
        buf.write(u"\u01c9\3\2\2\2\u01c8\u017a\3\2\2\2\u01c8\u017e\3\2\2")
        buf.write(u"\2\u01c8\u0183\3\2\2\2\u01c8\u0189\3\2\2\2\u01c8\u018f")
        buf.write(u"\3\2\2\2\u01c8\u0195\3\2\2\2\u01c8\u019c\3\2\2\2\u01c8")
        buf.write(u"\u01a1\3\2\2\2\u01c8\u01a6\3\2\2\2\u01c8\u01ab\3\2\2")
        buf.write(u"\2\u01c8\u01b0\3\2\2\2\u01c8\u01b6\3\2\2\2\u01c8\u01bc")
        buf.write(u"\3\2\2\2\u01c8\u01c2\3\2\2\2\u01c9!\3\2\2\2\u01ca\u01cb")
        buf.write(u"\7\66\2\2\u01cb\u01cc\7%\2\2\u01cc\u01cd\7\66\2\2\u01cd")
        buf.write(u"\u01ce\5\66\34\2\u01ce\u01cf\7\67\2\2\u01cf\u01d2\5\2")
        buf.write(u"\2\2\u01d0\u01d1\7\65\2\2\u01d1\u01d3\5\2\2\2\u01d2\u01d0")
        buf.write(u"\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4")
        buf.write(u"\u01d5\7\67\2\2\u01d5\u0262\3\2\2\2\u01d6\u01d7\7\66")
        buf.write(u"\2\2\u01d7\u01d8\7%\2\2\u01d8\u01d9\7\66\2\2\u01d9\u01da")
        buf.write(u"\7&\2\2\u01da\u01db\5\66\34\2\u01db\u01dc\7\67\2\2\u01dc")
        buf.write(u"\u01df\5\2\2\2\u01dd\u01de\7\65\2\2\u01de\u01e0\5\2\2")
        buf.write(u"\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1")
        buf.write(u"\3\2\2\2\u01e1\u01e2\7\67\2\2\u01e2\u0262\3\2\2\2\u01e3")
        buf.write(u"\u01e4\7\66\2\2\u01e4\u01e5\7%\2\2\u01e5\u01e6\7\66\2")
        buf.write(u"\2\u01e6\u01e7\7\"\2\2\u01e7\u01e8\5\66\34\2\u01e8\u01e9")
        buf.write(u"\7\67\2\2\u01e9\u01ec\5\2\2\2\u01ea\u01eb\7\65\2\2\u01eb")
        buf.write(u"\u01ed\5\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2")
        buf.write(u"\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\7\67\2\2\u01ef\u0262")
        buf.write(u"\3\2\2\2\u01f0\u01f1\7\66\2\2\u01f1\u01f2\7%\2\2\u01f2")
        buf.write(u"\u01f3\7\66\2\2\u01f3\u01f4\78\2\2\u01f4\u01f5\5@!\2")
        buf.write(u"\u01f5\u01f6\79\2\2\u01f6\u01f7\7\67\2\2\u01f7\u01fa")
        buf.write(u"\5\2\2\2\u01f8\u01f9\7\65\2\2\u01f9\u01fb\5\2\2\2\u01fa")
        buf.write(u"\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc\3\2\2")
        buf.write(u"\2\u01fc\u01fd\7\67\2\2\u01fd\u0262\3\2\2\2\u01fe\u01ff")
        buf.write(u"\7\66\2\2\u01ff\u0200\7%\2\2\u0200\u0201\7\66\2\2\u0201")
        buf.write(u"\u0202\7:\2\2\u0202\u0203\5@!\2\u0203\u0204\7:\2\2\u0204")
        buf.write(u"\u0205\7\67\2\2\u0205\u0208\5\2\2\2\u0206\u0207\7\65")
        buf.write(u"\2\2\u0207\u0209\5\2\2\2\u0208\u0206\3\2\2\2\u0208\u0209")
        buf.write(u"\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b\7\67\2\2\u020b")
        buf.write(u"\u0262\3\2\2\2\u020c\u020d\7\66\2\2\u020d\u020e\7%\2")
        buf.write(u"\2\u020e\u020f\7\66\2\2\u020f\u0210\7l\2\2\u0210\u0211")
        buf.write(u"\5\66\34\2\u0211\u0212\7\67\2\2\u0212\u0215\5\2\2\2\u0213")
        buf.write(u"\u0214\7\65\2\2\u0214\u0216\5\2\2\2\u0215\u0213\3\2\2")
        buf.write(u"\2\u0215\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218")
        buf.write(u"\7\67\2\2\u0218\u0262\3\2\2\2\u0219\u021a\7\66\2\2\u021a")
        buf.write(u"\u021b\7%\2\2\u021b\u021c\7\66\2\2\u021c\u021d\7l\2\2")
        buf.write(u"\u021d\u021e\7\67\2\2\u021e\u0221\5\2\2\2\u021f\u0220")
        buf.write(u"\7\65\2\2\u0220\u0222\5\2\2\2\u0221\u021f\3\2\2\2\u0221")
        buf.write(u"\u0222\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224\7\67\2")
        buf.write(u"\2\u0224\u0262\3\2\2\2\u0225\u0226\7\66\2\2\u0226\u0227")
        buf.write(u"\7%\2\2\u0227\u0228\7\66\2\2\u0228\u0229\7l\2\2\u0229")
        buf.write(u"\u022a\7@\2\2\u022a\u022b\5@!\2\u022b\u022c\7\67\2\2")
        buf.write(u"\u022c\u022f\5\2\2\2\u022d\u022e\7\65\2\2\u022e\u0230")
        buf.write(u"\5\2\2\2\u022f\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write(u"\u0231\3\2\2\2\u0231\u0232\7\67\2\2\u0232\u0262\3\2\2")
        buf.write(u"\2\u0233\u0234\7\66\2\2\u0234\u0235\7%\2\2\u0235\u0236")
        buf.write(u"\7\66\2\2\u0236\u0237\7^\2\2\u0237\u0238\7_\2\2\u0238")
        buf.write(u"\u0239\7`\2\2\u0239\u023a\7c\2\2\u023a\u023b\7h\2\2\u023b")
        buf.write(u"\u023c\7_\2\2\u023c\u023d\7\67\2\2\u023d\u0240\5\2\2")
        buf.write(u"\2\u023e\u023f\7\65\2\2\u023f\u0241\5\2\2\2\u0240\u023e")
        buf.write(u"\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write(u"\u0243\7\67\2\2\u0243\u0262\3\2\2\2\u0244\u0245\7\66")
        buf.write(u"\2\2\u0245\u0246\7%\2\2\u0246\u0247\7\66\2\2\u0247\u0248")
        buf.write(u"\7A\2\2\u0248\u0249\7S\2\2\u0249\u024a\7S\2\2\u024a\u024b")
        buf.write(u"\7E\2\2\u024b\u024c\7R\2\2\u024c\u024d\7T\2\2\u024d\u024e")
        buf.write(u"\7\67\2\2\u024e\u0251\5\2\2\2\u024f\u0250\7\65\2\2\u0250")
        buf.write(u"\u0252\5\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2")
        buf.write(u"\2\u0252\u0253\3\2\2\2\u0253\u0254\7\67\2\2\u0254\u0262")
        buf.write(u"\3\2\2\2\u0255\u0256\7\66\2\2\u0256\u0257\7%\2\2\u0257")
        buf.write(u"\u0258\7\66\2\2\u0258\u0259\5@!\2\u0259\u025a\7\67\2")
        buf.write(u"\2\u025a\u025d\5\2\2\2\u025b\u025c\7\65\2\2\u025c\u025e")
        buf.write(u"\5\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write(u"\u025f\3\2\2\2\u025f\u0260\7\67\2\2\u0260\u0262\3\2\2")
        buf.write(u"\2\u0261\u01ca\3\2\2\2\u0261\u01d6\3\2\2\2\u0261\u01e3")
        buf.write(u"\3\2\2\2\u0261\u01f0\3\2\2\2\u0261\u01fe\3\2\2\2\u0261")
        buf.write(u"\u020c\3\2\2\2\u0261\u0219\3\2\2\2\u0261\u0225\3\2\2")
        buf.write(u"\2\u0261\u0233\3\2\2\2\u0261\u0244\3\2\2\2\u0261\u0255")
        buf.write(u"\3\2\2\2\u0262#\3\2\2\2\u0263\u0264\7\66\2\2\u0264\u0265")
        buf.write(u"\7\'\2\2\u0265\u0266\7[\2\2\u0266\u0267\7]\2\2\u0267")
        buf.write(u"\u0268\7]\2\2\u0268\u0269\7_\2\2\u0269\u026a\7j\2\2\u026a")
        buf.write(u"\u026b\7n\2\2\u026b\u02c8\7\67\2\2\u026c\u026d\7\66\2")
        buf.write(u"\2\u026d\u026e\7\'\2\2\u026e\u0272\7`\2\2\u026f\u0270")
        buf.write(u"\7[\2\2\u0270\u0271\7c\2\2\u0271\u0273\7f\2\2\u0272\u026f")
        buf.write(u"\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write(u"\u02c8\7\67\2\2\u0275\u0276\7\66\2\2\u0276\u027b\7\'")
        buf.write(u"\2\2\u0277\u0278\7g\2\2\u0278\u0279\7[\2\2\u0279\u027a")
        buf.write(u"\7l\2\2\u027a\u027c\7e\2\2\u027b\u0277\3\2\2\2\u027b")
        buf.write(u"\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e\7<\2\2")
        buf.write(u"\u027e\u027f\7h\2\2\u027f\u0280\7[\2\2\u0280\u0281\7")
        buf.write(u"g\2\2\u0281\u0282\7_\2\2\u0282\u02c8\7\67\2\2\u0283\u0284")
        buf.write(u"\7\66\2\2\u0284\u0285\7\'\2\2\u0285\u0286\7]\2\2\u0286")
        buf.write(u"\u0287\7i\2\2\u0287\u0288\7g\2\2\u0288\u0289\7g\2\2\u0289")
        buf.write(u"\u028a\7c\2\2\u028a\u028b\7n\2\2\u028b\u02c8\7\67\2\2")
        buf.write(u"\u028c\u028d\7\66\2\2\u028d\u028e\7\'\2\2\u028e\u028f")
        buf.write(u"\7j\2\2\u028f\u0290\7l\2\2\u0290\u0291\7o\2\2\u0291\u0292")
        buf.write(u"\7h\2\2\u0292\u0293\7_\2\2\u0293\u02c8\7\67\2\2\u0294")
        buf.write(u"\u0295\7\66\2\2\u0295\u0296\7\'\2\2\u0296\u0297\7j\2")
        buf.write(u"\2\u0297\u0298\7l\2\2\u0298\u0299\7o\2\2\u0299\u029a")
        buf.write(u"\7h\2\2\u029a\u029b\7_\2\2\u029b\u029c\7<\2\2\u029c\u029d")
        buf.write(u"\7h\2\2\u029d\u029e\7[\2\2\u029e\u029f\7g\2\2\u029f\u02a0")
        buf.write(u"\7_\2\2\u02a0\u02c8\7\67\2\2\u02a1\u02a2\7\66\2\2\u02a2")
        buf.write(u"\u02a3\7\'\2\2\u02a3\u02a4\7m\2\2\u02a4\u02a5\7e\2\2")
        buf.write(u"\u02a5\u02a6\7c\2\2\u02a6\u02a7\7j\2\2\u02a7\u02c8\7")
        buf.write(u"\67\2\2\u02a8\u02a9\7\66\2\2\u02a9\u02aa\7\'\2\2\u02aa")
        buf.write(u"\u02ab\7m\2\2\u02ab\u02ac\7e\2\2\u02ac\u02ad\7c\2\2\u02ad")
        buf.write(u"\u02ae\7j\2\2\u02ae\u02af\7<\2\2\u02af\u02b0\7h\2\2\u02b0")
        buf.write(u"\u02b1\7[\2\2\u02b1\u02b2\7g\2\2\u02b2\u02b3\7_\2\2\u02b3")
        buf.write(u"\u02c8\7\67\2\2\u02b4\u02b5\7\66\2\2\u02b5\u02b6\7\'")
        buf.write(u"\2\2\u02b6\u02b7\7n\2\2\u02b7\u02b8\7b\2\2\u02b8\u02b9")
        buf.write(u"\7_\2\2\u02b9\u02ba\7h\2\2\u02ba\u02c8\7\67\2\2\u02bb")
        buf.write(u"\u02bc\7\66\2\2\u02bc\u02bd\7\'\2\2\u02bd\u02be\7n\2")
        buf.write(u"\2\u02be\u02bf\7b\2\2\u02bf\u02c0\7_\2\2\u02c0\u02c1")
        buf.write(u"\7h\2\2\u02c1\u02c2\7<\2\2\u02c2\u02c3\7h\2\2\u02c3\u02c4")
        buf.write(u"\7[\2\2\u02c4\u02c5\7g\2\2\u02c5\u02c6\7_\2\2\u02c6\u02c8")
        buf.write(u"\7\67\2\2\u02c7\u0263\3\2\2\2\u02c7\u026c\3\2\2\2\u02c7")
        buf.write(u"\u0275\3\2\2\2\u02c7\u0283\3\2\2\2\u02c7\u028c\3\2\2")
        buf.write(u"\2\u02c7\u0294\3\2\2\2\u02c7\u02a1\3\2\2\2\u02c7\u02a8")
        buf.write(u"\3\2\2\2\u02c7\u02b4\3\2\2\2\u02c7\u02bb\3\2\2\2\u02c8")
        buf.write(u"%\3\2\2\2\u02c9\u02ca\7\66\2\2\u02ca\u02cb\7\'\2\2\u02cb")
        buf.write(u"\u02cc\7]\2\2\u02cc\u02cd\7l\2\2\u02cd\u0307\7\67\2\2")
        buf.write(u"\u02ce\u02cf\7\66\2\2\u02cf\u02d0\7\'\2\2\u02d0\u02d1")
        buf.write(u"\7f\2\2\u02d1\u02d2\7`\2\2\u02d2\u0307\7\67\2\2\u02d3")
        buf.write(u"\u02d4\7\66\2\2\u02d4\u02d5\7\'\2\2\u02d5\u02d6\7]\2")
        buf.write(u"\2\u02d6\u02d7\7l\2\2\u02d7\u02d8\7f\2\2\u02d8\u02d9")
        buf.write(u"\7`\2\2\u02d9\u0307\7\67\2\2\u02da\u02db\7\66\2\2\u02db")
        buf.write(u"\u02dc\7\'\2\2\u02dc\u02dd\7[\2\2\u02dd\u02de\7h\2\2")
        buf.write(u"\u02de\u02df\7s\2\2\u02df\u02e0\7]\2\2\u02e0\u02e1\7")
        buf.write(u"l\2\2\u02e1\u02e2\7f\2\2\u02e2\u02e3\7`\2\2\u02e3\u0307")
        buf.write(u"\7\67\2\2\u02e4\u02e5\7\66\2\2\u02e5\u02e6\7\'\2\2\u02e6")
        buf.write(u"\u02e7\7[\2\2\u02e7\u02e8\7h\2\2\u02e8\u02e9\7s\2\2\u02e9")
        buf.write(u"\u0307\7\67\2\2\u02ea\u02eb\7\66\2\2\u02eb\u02ec\7\'")
        buf.write(u"\2\2\u02ec\u02ed\7\\\2\2\u02ed\u02ee\7m\2\2\u02ee\u02ef")
        buf.write(u"\7l\2\2\u02ef\u02f0\7;\2\2\u02f0\u02f1\7[\2\2\u02f1\u02f2")
        buf.write(u"\7h\2\2\u02f2\u02f3\7s\2\2\u02f3\u02f4\7]\2\2\u02f4\u02f5")
        buf.write(u"\7l\2\2\u02f5\u02f6\7f\2\2\u02f6\u02f7\7`\2\2\u02f7\u0307")
        buf.write(u"\7\67\2\2\u02f8\u02f9\7\66\2\2\u02f9\u02fa\7\'\2\2\u02fa")
        buf.write(u"\u02fb\7\\\2\2\u02fb\u02fc\7m\2\2\u02fc\u02fd\7l\2\2")
        buf.write(u"\u02fd\u02fe\7;\2\2\u02fe\u02ff\7o\2\2\u02ff\u0300\7")
        buf.write(u"h\2\2\u0300\u0301\7c\2\2\u0301\u0302\7]\2\2\u0302\u0303")
        buf.write(u"\7i\2\2\u0303\u0304\7^\2\2\u0304\u0305\7_\2\2\u0305\u0307")
        buf.write(u"\7\67\2\2\u0306\u02c9\3\2\2\2\u0306\u02ce\3\2\2\2\u0306")
        buf.write(u"\u02d3\3\2\2\2\u0306\u02da\3\2\2\2\u0306\u02e4\3\2\2")
        buf.write(u"\2\u0306\u02ea\3\2\2\2\u0306\u02f8\3\2\2\2\u0307\'\3")
        buf.write(u"\2\2\2\u0308\u0309\7\66\2\2\u0309\u030a\7%\2\2\u030a")
        buf.write(u"\u030b\7]\2\2\u030b\u0313\7\67\2\2\u030c\u030d\7\66\2")
        buf.write(u"\2\u030d\u030e\7%\2\2\u030e\u030f\7]\2\2\u030f\u0310")
        buf.write(u"\5\66\34\2\u0310\u0311\7\67\2\2\u0311\u0313\3\2\2\2\u0312")
        buf.write(u"\u0308\3\2\2\2\u0312\u030c\3\2\2\2\u0313)\3\2\2\2\u0314")
        buf.write(u"\u032f\5 \21\2\u0315\u032f\5.\30\2\u0316\u032f\5\60\31")
        buf.write(u"\2\u0317\u032f\5\f\7\2\u0318\u032f\5\22\n\2\u0319\u032f")
        buf.write(u"\5\24\13\2\u031a\u032f\5\26\f\2\u031b\u032f\5\30\r\2")
        buf.write(u"\u031c\u032f\5\36\20\2\u031d\u032f\5\16\b\2\u031e\u032f")
        buf.write(u"\5\"\22\2\u031f\u032f\5$\23\2\u0320\u032f\5&\24\2\u0321")
        buf.write(u"\u032f\5(\25\2\u0322\u032f\7\16\2\2\u0323\u032f\7!\2")
        buf.write(u"\2\u0324\u032f\7-\2\2\u0325\u032f\7+\2\2\u0326\u032f")
        buf.write(u"\7,\2\2\u0327\u032f\7.\2\2\u0328\u032f\7/\2\2\u0329\u032f")
        buf.write(u"\7\60\2\2\u032a\u032f\7\61\2\2\u032b\u032f\7\62\2\2\u032c")
        buf.write(u"\u032f\7\17\2\2\u032d\u032f\7\36\2\2\u032e\u0314\3\2")
        buf.write(u"\2\2\u032e\u0315\3\2\2\2\u032e\u0316\3\2\2\2\u032e\u0317")
        buf.write(u"\3\2\2\2\u032e\u0318\3\2\2\2\u032e\u0319\3\2\2\2\u032e")
        buf.write(u"\u031a\3\2\2\2\u032e\u031b\3\2\2\2\u032e\u031c\3\2\2")
        buf.write(u"\2\u032e\u031d\3\2\2\2\u032e\u031e\3\2\2\2\u032e\u031f")
        buf.write(u"\3\2\2\2\u032e\u0320\3\2\2\2\u032e\u0321\3\2\2\2\u032e")
        buf.write(u"\u0322\3\2\2\2\u032e\u0323\3\2\2\2\u032e\u0324\3\2\2")
        buf.write(u"\2\u032e\u0325\3\2\2\2\u032e\u0326\3\2\2\2\u032e\u0327")
        buf.write(u"\3\2\2\2\u032e\u0328\3\2\2\2\u032e\u0329\3\2\2\2\u032e")
        buf.write(u"\u032a\3\2\2\2\u032e\u032b\3\2\2\2\u032e\u032c\3\2\2")
        buf.write(u"\2\u032e\u032d\3\2\2\2\u032f+\3\2\2\2\u0330\u0331\5\62")
        buf.write(u"\32\2\u0331\u0332\7\"\2\2\u0332\u0333\5\62\32\2\u0333")
        buf.write(u"\u0338\3\2\2\2\u0334\u0338\5.\30\2\u0335\u0338\5\62\32")
        buf.write(u"\2\u0336\u0338\5\20\t\2\u0337\u0330\3\2\2\2\u0337\u0334")
        buf.write(u"\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0336\3\2\2\2\u0338")
        buf.write(u"-\3\2\2\2\u0339\u033a\t\3\2\2\u033a/\3\2\2\2\u033b\u033e")
        buf.write(u"\5\64\33\2\u033c\u033e\7 \2\2\u033d\u033b\3\2\2\2\u033d")
        buf.write(u"\u033c\3\2\2\2\u033e\61\3\2\2\2\u033f\u034c\5\64\33\2")
        buf.write(u"\u0340\u034c\7\16\2\2\u0341\u034c\7\37\2\2\u0342\u034c")
        buf.write(u"\7!\2\2\u0343\u034c\7%\2\2\u0344\u034c\7&\2\2\u0345\u034c")
        buf.write(u"\7\'\2\2\u0346\u034c\7+\2\2\u0347\u034c\7.\2\2\u0348")
        buf.write(u"\u034c\7\65\2\2\u0349\u034c\7\66\2\2\u034a\u034c\7\67")
        buf.write(u"\2\2\u034b\u033f\3\2\2\2\u034b\u0340\3\2\2\2\u034b\u0341")
        buf.write(u"\3\2\2\2\u034b\u0342\3\2\2\2\u034b\u0343\3\2\2\2\u034b")
        buf.write(u"\u0344\3\2\2\2\u034b\u0345\3\2\2\2\u034b\u0346\3\2\2")
        buf.write(u"\2\u034b\u0347\3\2\2\2\u034b\u0348\3\2\2\2\u034b\u0349")
        buf.write(u"\3\2\2\2\u034b\u034a\3\2\2\2\u034c\63\3\2\2\2\u034d\u0368")
        buf.write(u"\58\35\2\u034e\u0368\5H%\2\u034f\u0368\5> \2\u0350\u0368")
        buf.write(u"\7\5\2\2\u0351\u0368\7\7\2\2\u0352\u0368\7\b\2\2\u0353")
        buf.write(u"\u0368\7\t\2\2\u0354\u0368\7\n\2\2\u0355\u0368\7\13\2")
        buf.write(u"\2\u0356\u0368\7\r\2\2\u0357\u0368\7\3\2\2\u0358\u0368")
        buf.write(u"\7\4\2\2\u0359\u0368\7(\2\2\u035a\u0368\7)\2\2\u035b")
        buf.write(u"\u0368\7*\2\2\u035c\u0368\7\"\2\2\u035d\u0368\78\2\2")
        buf.write(u"\u035e\u0368\79\2\2\u035f\u0368\7:\2\2\u0360\u0368\7")
        buf.write(u";\2\2\u0361\u0368\7<\2\2\u0362\u0368\7=\2\2\u0363\u0368")
        buf.write(u"\7>\2\2\u0364\u0368\7?\2\2\u0365\u0368\7@\2\2\u0366\u0368")
        buf.write(u"\7\177\2\2\u0367\u034d\3\2\2\2\u0367\u034e\3\2\2\2\u0367")
        buf.write(u"\u034f\3\2\2\2\u0367\u0350\3\2\2\2\u0367\u0351\3\2\2")
        buf.write(u"\2\u0367\u0352\3\2\2\2\u0367\u0353\3\2\2\2\u0367\u0354")
        buf.write(u"\3\2\2\2\u0367\u0355\3\2\2\2\u0367\u0356\3\2\2\2\u0367")
        buf.write(u"\u0357\3\2\2\2\u0367\u0358\3\2\2\2\u0367\u0359\3\2\2")
        buf.write(u"\2\u0367\u035a\3\2\2\2\u0367\u035b\3\2\2\2\u0367\u035c")
        buf.write(u"\3\2\2\2\u0367\u035d\3\2\2\2\u0367\u035e\3\2\2\2\u0367")
        buf.write(u"\u035f\3\2\2\2\u0367\u0360\3\2\2\2\u0367\u0361\3\2\2")
        buf.write(u"\2\u0367\u0362\3\2\2\2\u0367\u0363\3\2\2\2\u0367\u0364")
        buf.write(u"\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0366\3\2\2\2\u0368")
        buf.write(u"\65\3\2\2\2\u0369\u036a\5<\37\2\u036a\67\3\2\2\2\u036b")
        buf.write(u"\u036c\7\f\2\2\u036c\u036d\t\4\2\2\u036d\u036e\5:\36")
        buf.write(u"\2\u036e\u036f\5:\36\2\u036f\u0375\3\2\2\2\u0370\u0371")
        buf.write(u"\7\f\2\2\u0371\u0372\5:\36\2\u0372\u0373\5:\36\2\u0373")
        buf.write(u"\u0375\3\2\2\2\u0374\u036b\3\2\2\2\u0374\u0370\3\2\2")
        buf.write(u"\2\u03759\3\2\2\2\u0376\u0377\t\5\2\2\u0377;\3\2\2\2")
        buf.write(u"\u0378\u037a\5> \2\u0379\u0378\3\2\2\2\u037a\u037b\3")
        buf.write(u"\2\2\2\u037b\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write(u"=\3\2\2\2\u037d\u037e\t\6\2\2\u037e?\3\2\2\2\u037f\u0380")
        buf.write(u"\5B\"\2\u0380A\3\2\2\2\u0381\u0384\5H%\2\u0382\u0384")
        buf.write(u"\7;\2\2\u0383\u0381\3\2\2\2\u0383\u0382\3\2\2\2\u0384")
        buf.write(u"\u038a\3\2\2\2\u0385\u0389\5H%\2\u0386\u0389\7;\2\2\u0387")
        buf.write(u"\u0389\5> \2\u0388\u0385\3\2\2\2\u0388\u0386\3\2\2\2")
        buf.write(u"\u0388\u0387\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388")
        buf.write(u"\3\2\2\2\u038a\u038b\3\2\2\2\u038bC\3\2\2\2\u038c\u038a")
        buf.write(u"\3\2\2\2\u038d\u038f\5F$\2\u038e\u038d\3\2\2\2\u038f")
        buf.write(u"\u0390\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u0391\3\2\2")
        buf.write(u"\2\u0391E\3\2\2\2\u0392\u0393\n\7\2\2\u0393G\3\2\2\2")
        buf.write(u"\u0394\u0395\t\b\2\2\u0395I\3\2\2\2\62OUZty\u0082\u008c")
        buf.write(u"\u0095\u009f\u00a8\u00b0\u00b4\u00df\u00e4\u0103\u0117")
        buf.write(u"\u0155\u015a\u0178\u01c8\u01d2\u01df\u01ec\u01fa\u0208")
        buf.write(u"\u0215\u0221\u022f\u0240\u0251\u025d\u0261\u0272\u027b")
        buf.write(u"\u02c7\u0306\u0312\u032e\u0337\u033d\u034b\u0367\u0374")
        buf.write(u"\u037b\u0383\u0388\u038a\u0390")
        return buf.getvalue()


class PCREParser ( Parser ):

    grammarFileName = "PCRE.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'\\a'", 
                     u"'\\c'", u"'\\e'", u"'\\f'", u"'\\n'", u"'\\r'", u"'\\t'", 
                     u"'\\'", u"<INVALID>", u"'.'", u"'\\C'", u"'\\d'", 
                     u"'\\D'", u"'\\h'", u"'\\H'", u"'\\N'", u"<INVALID>", 
                     u"<INVALID>", u"'\\R'", u"'\\s'", u"'\\S'", u"'\\v'", 
                     u"'\\V'", u"'\\w'", u"'\\W'", u"'\\X'", u"'['", u"']'", 
                     u"'^'", u"'-'", u"<INVALID>", u"<INVALID>", u"'?'", 
                     u"'+'", u"'*'", u"'{'", u"'}'", u"','", u"'\\b'", u"'\\B'", 
                     u"'\\A'", u"'$'", u"'\\Z'", u"'\\z'", u"'\\G'", u"'\\K'", 
                     u"'\\g'", u"'\\k'", u"'|'", u"'('", u"')'", u"'<'", 
                     u"'>'", u"'''", u"'_'", u"':'", u"'#'", u"'='", u"'!'", 
                     u"'&'", u"'a'", u"'b'", u"'c'", u"'d'", u"'e'", u"'f'", 
                     u"'g'", u"'h'", u"'i'", u"'j'", u"'k'", u"'l'", u"'m'", 
                     u"'n'", u"'o'", u"'p'", u"'q'", u"'r'", u"'s'", u"'t'", 
                     u"'u'", u"'v'", u"'w'", u"'x'", u"'y'", u"'z'", u"'A'", 
                     u"'B'", u"'C'", u"'D'", u"'E'", u"'F'", u"'G'", u"'H'", 
                     u"'I'", u"'J'", u"'K'", u"'L'", u"'M'", u"'N'", u"'O'", 
                     u"'P'", u"'Q'", u"'R'", u"'S'", u"'T'", u"'U'", u"'V'", 
                     u"'W'", u"'X'", u"'Y'", u"'Z'", u"'1'", u"'2'", u"'3'", 
                     u"'4'", u"'5'", u"'6'", u"'7'", u"'8'", u"'9'", u"'0'" ]

    symbolicNames = [ u"<INVALID>", u"Quoted", u"BlockQuoted", u"BellChar", 
                      u"ControlChar", u"EscapeChar", u"FormFeed", u"NewLine", 
                      u"CarriageReturn", u"Tab", u"Backslash", u"HexChar", 
                      u"Dot", u"OneDataUnit", u"DecimalDigit", u"NotDecimalDigit", 
                      u"HorizontalWhiteSpace", u"NotHorizontalWhiteSpace", 
                      u"NotNewLine", u"CharWithProperty", u"CharWithoutProperty", 
                      u"NewLineSequence", u"WhiteSpace", u"NotWhiteSpace", 
                      u"VerticalWhiteSpace", u"NotVerticalWhiteSpace", u"WordChar", 
                      u"NotWordChar", u"ExtendedUnicodeChar", u"CharacterClassStart", 
                      u"CharacterClassEnd", u"Caret", u"Hyphen", u"POSIXNamedSet", 
                      u"POSIXNegatedNamedSet", u"QuestionMark", u"Plus", 
                      u"Star", u"OpenBrace", u"CloseBrace", u"Comma", u"WordBoundary", 
                      u"NonWordBoundary", u"StartOfSubject", u"EndOfSubjectOrLine", 
                      u"EndOfSubjectOrLineEndOfSubject", u"EndOfSubject", 
                      u"PreviousMatchInSubject", u"ResetStartMatch", u"SubroutineOrNamedReferenceStartG", 
                      u"NamedReferenceStartK", u"Pipe", u"OpenParen", u"CloseParen", 
                      u"LessThan", u"GreaterThan", u"SingleQuote", u"Underscore", 
                      u"Colon", u"Hash", u"Equals", u"Exclamation", u"Ampersand", 
                      u"ALC", u"BLC", u"CLC", u"DLC", u"ELC", u"FLC", u"GLC", 
                      u"HLC", u"ILC", u"JLC", u"KLC", u"LLC", u"MLC", u"NLC", 
                      u"OLC", u"PLC", u"QLC", u"RLC", u"SLC", u"TLC", u"ULC", 
                      u"VLC", u"WLC", u"XLC", u"YLC", u"ZLC", u"AUC", u"BUC", 
                      u"CUC", u"DUC", u"EUC", u"FUC", u"GUC", u"HUC", u"IUC", 
                      u"JUC", u"KUC", u"LUC", u"MUC", u"NUC", u"OUC", u"PUC", 
                      u"QUC", u"RUC", u"SUC", u"TUC", u"UUC", u"VUC", u"WUC", 
                      u"XUC", u"YUC", u"ZUC", u"D1", u"D2", u"D3", u"D4", 
                      u"D5", u"D6", u"D7", u"D8", u"D9", u"D0", u"OtherChar" ]

    RULE_alternation = 0
    RULE_pcreexpr = 1
    RULE_element = 2
    RULE_quantifier = 3
    RULE_quantifier_type = 4
    RULE_character_class = 5
    RULE_backreference = 6
    RULE_backreference_or_octal = 7
    RULE_capture = 8
    RULE_non_capture = 9
    RULE_comment = 10
    RULE_option = 11
    RULE_option_flags = 12
    RULE_option_flag = 13
    RULE_look_around = 14
    RULE_subroutine_reference = 15
    RULE_conditional = 16
    RULE_backtrack_control = 17
    RULE_newline_convention = 18
    RULE_callout = 19
    RULE_atom = 20
    RULE_cc_atom = 21
    RULE_shared_atom = 22
    RULE_pcre_literal = 23
    RULE_cc_literal = 24
    RULE_shared_literal = 25
    RULE_number = 26
    RULE_octal_char = 27
    RULE_octal_digit = 28
    RULE_digits = 29
    RULE_digit = 30
    RULE_name = 31
    RULE_alpha_nums = 32
    RULE_non_close_parens = 33
    RULE_non_close_paren = 34
    RULE_letter = 35

    ruleNames =  [ u"alternation", u"pcreexpr", u"element", u"quantifier", 
                   u"quantifier_type", u"character_class", u"backreference", 
                   u"backreference_or_octal", u"capture", u"non_capture", 
                   u"comment", u"option", u"option_flags", u"option_flag", 
                   u"look_around", u"subroutine_reference", u"conditional", 
                   u"backtrack_control", u"newline_convention", u"callout", 
                   u"atom", u"cc_atom", u"shared_atom", u"pcre_literal", 
                   u"cc_literal", u"shared_literal", u"number", u"octal_char", 
                   u"octal_digit", u"digits", u"digit", u"name", u"alpha_nums", 
                   u"non_close_parens", u"non_close_paren", u"letter" ]

    EOF = Token.EOF
    Quoted=1
    BlockQuoted=2
    BellChar=3
    ControlChar=4
    EscapeChar=5
    FormFeed=6
    NewLine=7
    CarriageReturn=8
    Tab=9
    Backslash=10
    HexChar=11
    Dot=12
    OneDataUnit=13
    DecimalDigit=14
    NotDecimalDigit=15
    HorizontalWhiteSpace=16
    NotHorizontalWhiteSpace=17
    NotNewLine=18
    CharWithProperty=19
    CharWithoutProperty=20
    NewLineSequence=21
    WhiteSpace=22
    NotWhiteSpace=23
    VerticalWhiteSpace=24
    NotVerticalWhiteSpace=25
    WordChar=26
    NotWordChar=27
    ExtendedUnicodeChar=28
    CharacterClassStart=29
    CharacterClassEnd=30
    Caret=31
    Hyphen=32
    POSIXNamedSet=33
    POSIXNegatedNamedSet=34
    QuestionMark=35
    Plus=36
    Star=37
    OpenBrace=38
    CloseBrace=39
    Comma=40
    WordBoundary=41
    NonWordBoundary=42
    StartOfSubject=43
    EndOfSubjectOrLine=44
    EndOfSubjectOrLineEndOfSubject=45
    EndOfSubject=46
    PreviousMatchInSubject=47
    ResetStartMatch=48
    SubroutineOrNamedReferenceStartG=49
    NamedReferenceStartK=50
    Pipe=51
    OpenParen=52
    CloseParen=53
    LessThan=54
    GreaterThan=55
    SingleQuote=56
    Underscore=57
    Colon=58
    Hash=59
    Equals=60
    Exclamation=61
    Ampersand=62
    ALC=63
    BLC=64
    CLC=65
    DLC=66
    ELC=67
    FLC=68
    GLC=69
    HLC=70
    ILC=71
    JLC=72
    KLC=73
    LLC=74
    MLC=75
    NLC=76
    OLC=77
    PLC=78
    QLC=79
    RLC=80
    SLC=81
    TLC=82
    ULC=83
    VLC=84
    WLC=85
    XLC=86
    YLC=87
    ZLC=88
    AUC=89
    BUC=90
    CUC=91
    DUC=92
    EUC=93
    FUC=94
    GUC=95
    HUC=96
    IUC=97
    JUC=98
    KUC=99
    LUC=100
    MUC=101
    NUC=102
    OUC=103
    PUC=104
    QUC=105
    RUC=106
    SUC=107
    TUC=108
    UUC=109
    VUC=110
    WUC=111
    XUC=112
    YUC=113
    ZUC=114
    D1=115
    D2=116
    D3=117
    D4=118
    D5=119
    D6=120
    D7=121
    D8=122
    D9=123
    D0=124
    OtherChar=125

    def __init__(self, input):
        super(PCREParser, self).__init__(input)
        self.checkVersion("4.5.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class AlternationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.AlternationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pcreexpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.PcreexprContext)
            else:
                return self.getTypedRuleContext(PCREParser.PcreexprContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_alternation

        def enterRule(self, listener):
            if hasattr(listener, "enterAlternation"):
                listener.enterAlternation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlternation"):
                listener.exitAlternation(self)




    def alternation(self):

        localctx = PCREParser.AlternationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_alternation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 72
            self.pcreexpr()
            self.state = 77
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 73
                    self.match(PCREParser.Pipe)
                    self.state = 74
                    self.pcreexpr() 
                self.state = 79
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PcreexprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.PcreexprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def element(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.ElementContext)
            else:
                return self.getTypedRuleContext(PCREParser.ElementContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_pcreexpr

        def enterRule(self, listener):
            if hasattr(listener, "enterPcreexpr"):
                listener.enterPcreexpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPcreexpr"):
                listener.exitPcreexpr(self)




    def pcreexpr(self):

        localctx = PCREParser.PcreexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pcreexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 83
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.OneDataUnit) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.ExtendedUnicodeChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.CharacterClassEnd) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.NonWordBoundary) | (1 << PCREParser.StartOfSubject) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.EndOfSubjectOrLineEndOfSubject) | (1 << PCREParser.EndOfSubject) | (1 << PCREParser.PreviousMatchInSubject) | (1 << PCREParser.ResetStartMatch) | (1 << PCREParser.SubroutineOrNamedReferenceStartG) | (1 << PCREParser.NamedReferenceStartK) | (1 << PCREParser.OpenParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0):
                self.state = 80
                self.element()
                self.state = 85
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.ElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PCREParser.AtomContext,0)


        def quantifier(self):
            return self.getTypedRuleContext(PCREParser.QuantifierContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_element

        def enterRule(self, listener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)




    def element(self):

        localctx = PCREParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 86
            self.atom()
            self.state = 88
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 87
                self.quantifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.QuantifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def quantifier_type(self):
            return self.getTypedRuleContext(PCREParser.Quantifier_typeContext,0)


        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.NumberContext)
            else:
                return self.getTypedRuleContext(PCREParser.NumberContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_quantifier

        def enterRule(self, listener):
            if hasattr(listener, "enterQuantifier"):
                listener.enterQuantifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuantifier"):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = PCREParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quantifier)
        try:
            self.state = 114
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 90
                self.match(PCREParser.QuestionMark)
                self.state = 91
                self.quantifier_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 92
                self.match(PCREParser.Plus)
                self.state = 93
                self.quantifier_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 94
                self.match(PCREParser.Star)
                self.state = 95
                self.quantifier_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 96
                self.match(PCREParser.OpenBrace)
                self.state = 97
                self.number()
                self.state = 98
                self.match(PCREParser.CloseBrace)
                self.state = 99
                self.quantifier_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 101
                self.match(PCREParser.OpenBrace)
                self.state = 102
                self.number()
                self.state = 103
                self.match(PCREParser.Comma)
                self.state = 104
                self.match(PCREParser.CloseBrace)
                self.state = 105
                self.quantifier_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 107
                self.match(PCREParser.OpenBrace)
                self.state = 108
                self.number()
                self.state = 109
                self.match(PCREParser.Comma)
                self.state = 110
                self.number()
                self.state = 111
                self.match(PCREParser.CloseBrace)
                self.state = 112
                self.quantifier_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantifier_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Quantifier_typeContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PCREParser.RULE_quantifier_type

        def enterRule(self, listener):
            if hasattr(listener, "enterQuantifier_type"):
                listener.enterQuantifier_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuantifier_type"):
                listener.exitQuantifier_type(self)




    def quantifier_type(self):

        localctx = PCREParser.Quantifier_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quantifier_type)
        try:
            self.state = 119
            token = self._input.LA(1)
            if token in [PCREParser.Plus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 116
                self.match(PCREParser.Plus)

            elif token in [PCREParser.QuestionMark]:
                self.enterOuterAlt(localctx, 2)
                self.state = 117
                self.match(PCREParser.QuestionMark)

            elif token in [PCREParser.Quoted, PCREParser.BlockQuoted, PCREParser.BellChar, PCREParser.ControlChar, PCREParser.EscapeChar, PCREParser.FormFeed, PCREParser.NewLine, PCREParser.CarriageReturn, PCREParser.Tab, PCREParser.Backslash, PCREParser.HexChar, PCREParser.Dot, PCREParser.OneDataUnit, PCREParser.DecimalDigit, PCREParser.NotDecimalDigit, PCREParser.HorizontalWhiteSpace, PCREParser.NotHorizontalWhiteSpace, PCREParser.NotNewLine, PCREParser.CharWithProperty, PCREParser.CharWithoutProperty, PCREParser.NewLineSequence, PCREParser.WhiteSpace, PCREParser.NotWhiteSpace, PCREParser.VerticalWhiteSpace, PCREParser.NotVerticalWhiteSpace, PCREParser.WordChar, PCREParser.NotWordChar, PCREParser.ExtendedUnicodeChar, PCREParser.CharacterClassStart, PCREParser.CharacterClassEnd, PCREParser.Caret, PCREParser.Hyphen, PCREParser.POSIXNamedSet, PCREParser.POSIXNegatedNamedSet, PCREParser.OpenBrace, PCREParser.CloseBrace, PCREParser.Comma, PCREParser.WordBoundary, PCREParser.NonWordBoundary, PCREParser.StartOfSubject, PCREParser.EndOfSubjectOrLine, PCREParser.EndOfSubjectOrLineEndOfSubject, PCREParser.EndOfSubject, PCREParser.PreviousMatchInSubject, PCREParser.ResetStartMatch, PCREParser.SubroutineOrNamedReferenceStartG, PCREParser.NamedReferenceStartK, PCREParser.Pipe, PCREParser.OpenParen, PCREParser.CloseParen, PCREParser.LessThan, PCREParser.GreaterThan, PCREParser.SingleQuote, PCREParser.Underscore, PCREParser.Colon, PCREParser.Hash, PCREParser.Equals, PCREParser.Exclamation, PCREParser.Ampersand, PCREParser.ALC, PCREParser.BLC, PCREParser.CLC, PCREParser.DLC, PCREParser.ELC, PCREParser.FLC, PCREParser.GLC, PCREParser.HLC, PCREParser.ILC, PCREParser.JLC, PCREParser.KLC, PCREParser.LLC, PCREParser.MLC, PCREParser.NLC, PCREParser.OLC, PCREParser.PLC, PCREParser.QLC, PCREParser.RLC, PCREParser.SLC, PCREParser.TLC, PCREParser.ULC, PCREParser.VLC, PCREParser.WLC, PCREParser.XLC, PCREParser.YLC, PCREParser.ZLC, PCREParser.AUC, PCREParser.BUC, PCREParser.CUC, PCREParser.DUC, PCREParser.EUC, PCREParser.FUC, PCREParser.GUC, PCREParser.HUC, PCREParser.IUC, PCREParser.JUC, PCREParser.KUC, PCREParser.LUC, PCREParser.MUC, PCREParser.NUC, PCREParser.OUC, PCREParser.PUC, PCREParser.QUC, PCREParser.RUC, PCREParser.SUC, PCREParser.TUC, PCREParser.UUC, PCREParser.VUC, PCREParser.WUC, PCREParser.XUC, PCREParser.YUC, PCREParser.ZUC, PCREParser.D1, PCREParser.D2, PCREParser.D3, PCREParser.D4, PCREParser.D5, PCREParser.D6, PCREParser.D7, PCREParser.D8, PCREParser.D9, PCREParser.D0, PCREParser.OtherChar]:
                self.enterOuterAlt(localctx, 3)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Character_classContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Character_classContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CharacterClassEnd(self):
            return self.getToken(PCREParser.CharacterClassEnd, 0)

        def Hyphen(self):
            return self.getToken(PCREParser.Hyphen, 0)

        def cc_atom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Cc_atomContext)
            else:
                return self.getTypedRuleContext(PCREParser.Cc_atomContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_character_class

        def enterRule(self, listener):
            if hasattr(listener, "enterCharacter_class"):
                listener.enterCharacter_class(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCharacter_class"):
                listener.exitCharacter_class(self)




    def character_class(self):

        localctx = PCREParser.Character_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_character_class)
        self._la = 0 # Token type
        try:
            self.state = 178
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 121
                self.match(PCREParser.CharacterClassStart)
                self.state = 122
                self.match(PCREParser.Caret)
                self.state = 123
                self.match(PCREParser.CharacterClassEnd)
                self.state = 124
                self.match(PCREParser.Hyphen)
                self.state = 126 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 125
                    self.cc_atom()
                    self.state = 128 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.CloseParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0)):
                        break

                self.state = 130
                self.match(PCREParser.CharacterClassEnd)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 132
                self.match(PCREParser.CharacterClassStart)
                self.state = 133
                self.match(PCREParser.Caret)
                self.state = 134
                self.match(PCREParser.CharacterClassEnd)
                self.state = 138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.CloseParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0):
                    self.state = 135
                    self.cc_atom()
                    self.state = 140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 141
                self.match(PCREParser.CharacterClassEnd)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 142
                self.match(PCREParser.CharacterClassStart)
                self.state = 143
                self.match(PCREParser.Caret)
                self.state = 145 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 144
                    self.cc_atom()
                    self.state = 147 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.CloseParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0)):
                        break

                self.state = 149
                self.match(PCREParser.CharacterClassEnd)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.match(PCREParser.CharacterClassStart)
                self.state = 152
                self.match(PCREParser.CharacterClassEnd)
                self.state = 153
                self.match(PCREParser.Hyphen)
                self.state = 155 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 154
                    self.cc_atom()
                    self.state = 157 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.CloseParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0)):
                        break

                self.state = 159
                self.match(PCREParser.CharacterClassEnd)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 161
                self.match(PCREParser.CharacterClassStart)
                self.state = 162
                self.match(PCREParser.CharacterClassEnd)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.CloseParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0):
                    self.state = 163
                    self.cc_atom()
                    self.state = 168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 169
                self.match(PCREParser.CharacterClassEnd)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 170
                self.match(PCREParser.CharacterClassStart)
                self.state = 172 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 171
                    self.cc_atom()
                    self.state = 174 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.CloseParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0)):
                        break

                self.state = 176
                self.match(PCREParser.CharacterClassEnd)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BackreferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.BackreferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def backreference_or_octal(self):
            return self.getTypedRuleContext(PCREParser.Backreference_or_octalContext,0)


        def number(self):
            return self.getTypedRuleContext(PCREParser.NumberContext,0)


        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_backreference

        def enterRule(self, listener):
            if hasattr(listener, "enterBackreference"):
                listener.enterBackreference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBackreference"):
                listener.exitBackreference(self)




    def backreference(self):

        localctx = PCREParser.BackreferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_backreference)
        try:
            self.state = 221
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 180
                self.backreference_or_octal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 181
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 182
                self.number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 184
                self.match(PCREParser.OpenBrace)
                self.state = 185
                self.number()
                self.state = 186
                self.match(PCREParser.CloseBrace)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 188
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 189
                self.match(PCREParser.OpenBrace)
                self.state = 190
                self.match(PCREParser.Hyphen)
                self.state = 191
                self.number()
                self.state = 192
                self.match(PCREParser.CloseBrace)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 194
                self.match(PCREParser.NamedReferenceStartK)
                self.state = 195
                self.match(PCREParser.LessThan)
                self.state = 196
                self.name()
                self.state = 197
                self.match(PCREParser.GreaterThan)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 199
                self.match(PCREParser.NamedReferenceStartK)
                self.state = 200
                self.match(PCREParser.SingleQuote)
                self.state = 201
                self.name()
                self.state = 202
                self.match(PCREParser.SingleQuote)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 204
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 205
                self.match(PCREParser.OpenBrace)
                self.state = 206
                self.name()
                self.state = 207
                self.match(PCREParser.CloseBrace)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 209
                self.match(PCREParser.NamedReferenceStartK)
                self.state = 210
                self.match(PCREParser.OpenBrace)
                self.state = 211
                self.name()
                self.state = 212
                self.match(PCREParser.CloseBrace)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 214
                self.match(PCREParser.OpenParen)
                self.state = 215
                self.match(PCREParser.QuestionMark)
                self.state = 216
                self.match(PCREParser.PUC)
                self.state = 217
                self.match(PCREParser.Equals)
                self.state = 218
                self.name()
                self.state = 219
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Backreference_or_octalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Backreference_or_octalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def octal_char(self):
            return self.getTypedRuleContext(PCREParser.Octal_charContext,0)


        def Backslash(self):
            return self.getToken(PCREParser.Backslash, 0)

        def digit(self):
            return self.getTypedRuleContext(PCREParser.DigitContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_backreference_or_octal

        def enterRule(self, listener):
            if hasattr(listener, "enterBackreference_or_octal"):
                listener.enterBackreference_or_octal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBackreference_or_octal"):
                listener.exitBackreference_or_octal(self)




    def backreference_or_octal(self):

        localctx = PCREParser.Backreference_or_octalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_backreference_or_octal)
        try:
            self.state = 226
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.octal_char()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.match(PCREParser.Backslash)
                self.state = 225
                self.digit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.CaptureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_capture

        def enterRule(self, listener):
            if hasattr(listener, "enterCapture"):
                listener.enterCapture(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCapture"):
                listener.exitCapture(self)




    def capture(self):

        localctx = PCREParser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_capture)
        try:
            self.state = 257
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.match(PCREParser.OpenParen)
                self.state = 229
                self.match(PCREParser.QuestionMark)
                self.state = 230
                self.match(PCREParser.LessThan)
                self.state = 231
                self.name()
                self.state = 232
                self.match(PCREParser.GreaterThan)
                self.state = 233
                self.alternation()
                self.state = 234
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.match(PCREParser.OpenParen)
                self.state = 237
                self.match(PCREParser.QuestionMark)
                self.state = 238
                self.match(PCREParser.SingleQuote)
                self.state = 239
                self.name()
                self.state = 240
                self.match(PCREParser.SingleQuote)
                self.state = 241
                self.alternation()
                self.state = 242
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 244
                self.match(PCREParser.OpenParen)
                self.state = 245
                self.match(PCREParser.QuestionMark)
                self.state = 246
                self.match(PCREParser.PUC)
                self.state = 247
                self.match(PCREParser.LessThan)
                self.state = 248
                self.name()
                self.state = 249
                self.match(PCREParser.GreaterThan)
                self.state = 250
                self.alternation()
                self.state = 251
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 253
                self.match(PCREParser.OpenParen)
                self.state = 254
                self.alternation()
                self.state = 255
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_captureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Non_captureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_non_capture

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_capture"):
                listener.enterNon_capture(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_capture"):
                listener.exitNon_capture(self)




    def non_capture(self):

        localctx = PCREParser.Non_captureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_non_capture)
        try:
            self.state = 277
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.match(PCREParser.OpenParen)
                self.state = 260
                self.match(PCREParser.QuestionMark)
                self.state = 261
                self.match(PCREParser.Colon)
                self.state = 262
                self.alternation()
                self.state = 263
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.match(PCREParser.OpenParen)
                self.state = 266
                self.match(PCREParser.QuestionMark)
                self.state = 267
                self.match(PCREParser.Pipe)
                self.state = 268
                self.alternation()
                self.state = 269
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 271
                self.match(PCREParser.OpenParen)
                self.state = 272
                self.match(PCREParser.QuestionMark)
                self.state = 273
                self.match(PCREParser.GreaterThan)
                self.state = 274
                self.alternation()
                self.state = 275
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.CommentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def non_close_parens(self):
            return self.getTypedRuleContext(PCREParser.Non_close_parensContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_comment

        def enterRule(self, listener):
            if hasattr(listener, "enterComment"):
                listener.enterComment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitComment"):
                listener.exitComment(self)




    def comment(self):

        localctx = PCREParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(PCREParser.OpenParen)
            self.state = 280
            self.match(PCREParser.QuestionMark)
            self.state = 281
            self.match(PCREParser.Hash)
            self.state = 282
            self.non_close_parens()
            self.state = 283
            self.match(PCREParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.OptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def option_flags(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Option_flagsContext)
            else:
                return self.getTypedRuleContext(PCREParser.Option_flagsContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_option

        def enterRule(self, listener):
            if hasattr(listener, "enterOption"):
                listener.enterOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOption"):
                listener.exitOption(self)




    def option(self):

        localctx = PCREParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_option)
        try:
            self.state = 339
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.match(PCREParser.OpenParen)
                self.state = 286
                self.match(PCREParser.QuestionMark)
                self.state = 287
                self.option_flags()
                self.state = 288
                self.match(PCREParser.Hyphen)
                self.state = 289
                self.option_flags()
                self.state = 290
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.match(PCREParser.OpenParen)
                self.state = 293
                self.match(PCREParser.QuestionMark)
                self.state = 294
                self.option_flags()
                self.state = 295
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.match(PCREParser.OpenParen)
                self.state = 298
                self.match(PCREParser.QuestionMark)
                self.state = 299
                self.match(PCREParser.Hyphen)
                self.state = 300
                self.option_flags()
                self.state = 301
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.match(PCREParser.OpenParen)
                self.state = 304
                self.match(PCREParser.Star)
                self.state = 305
                self.match(PCREParser.NUC)
                self.state = 306
                self.match(PCREParser.OUC)
                self.state = 307
                self.match(PCREParser.Underscore)
                self.state = 308
                self.match(PCREParser.SUC)
                self.state = 309
                self.match(PCREParser.TUC)
                self.state = 310
                self.match(PCREParser.AUC)
                self.state = 311
                self.match(PCREParser.RUC)
                self.state = 312
                self.match(PCREParser.TUC)
                self.state = 313
                self.match(PCREParser.Underscore)
                self.state = 314
                self.match(PCREParser.OUC)
                self.state = 315
                self.match(PCREParser.PUC)
                self.state = 316
                self.match(PCREParser.TUC)
                self.state = 317
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 318
                self.match(PCREParser.OpenParen)
                self.state = 319
                self.match(PCREParser.Star)
                self.state = 320
                self.match(PCREParser.UUC)
                self.state = 321
                self.match(PCREParser.TUC)
                self.state = 322
                self.match(PCREParser.FUC)
                self.state = 323
                self.match(PCREParser.D8)
                self.state = 324
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 325
                self.match(PCREParser.OpenParen)
                self.state = 326
                self.match(PCREParser.Star)
                self.state = 327
                self.match(PCREParser.UUC)
                self.state = 328
                self.match(PCREParser.TUC)
                self.state = 329
                self.match(PCREParser.FUC)
                self.state = 330
                self.match(PCREParser.D1)
                self.state = 331
                self.match(PCREParser.D6)
                self.state = 332
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 333
                self.match(PCREParser.OpenParen)
                self.state = 334
                self.match(PCREParser.Star)
                self.state = 335
                self.match(PCREParser.UUC)
                self.state = 336
                self.match(PCREParser.CUC)
                self.state = 337
                self.match(PCREParser.PUC)
                self.state = 338
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_flagsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Option_flagsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def option_flag(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Option_flagContext)
            else:
                return self.getTypedRuleContext(PCREParser.Option_flagContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_option_flags

        def enterRule(self, listener):
            if hasattr(listener, "enterOption_flags"):
                listener.enterOption_flags(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOption_flags"):
                listener.exitOption_flags(self)




    def option_flags(self):

        localctx = PCREParser.Option_flagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_option_flags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 341
                self.option_flag()
                self.state = 344 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (PCREParser.ILC - 71)) | (1 << (PCREParser.MLC - 71)) | (1 << (PCREParser.SLC - 71)) | (1 << (PCREParser.XLC - 71)) | (1 << (PCREParser.JUC - 71)) | (1 << (PCREParser.UUC - 71)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_flagContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Option_flagContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PCREParser.RULE_option_flag

        def enterRule(self, listener):
            if hasattr(listener, "enterOption_flag"):
                listener.enterOption_flag(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOption_flag"):
                listener.exitOption_flag(self)




    def option_flag(self):

        localctx = PCREParser.Option_flagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_option_flag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (PCREParser.ILC - 71)) | (1 << (PCREParser.MLC - 71)) | (1 << (PCREParser.SLC - 71)) | (1 << (PCREParser.XLC - 71)) | (1 << (PCREParser.JUC - 71)) | (1 << (PCREParser.UUC - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Look_aroundContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Look_aroundContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_look_around

        def enterRule(self, listener):
            if hasattr(listener, "enterLook_around"):
                listener.enterLook_around(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLook_around"):
                listener.exitLook_around(self)




    def look_around(self):

        localctx = PCREParser.Look_aroundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_look_around)
        try:
            self.state = 374
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 348
                self.match(PCREParser.OpenParen)
                self.state = 349
                self.match(PCREParser.QuestionMark)
                self.state = 350
                self.match(PCREParser.Equals)
                self.state = 351
                self.alternation()
                self.state = 352
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.match(PCREParser.OpenParen)
                self.state = 355
                self.match(PCREParser.QuestionMark)
                self.state = 356
                self.match(PCREParser.Exclamation)
                self.state = 357
                self.alternation()
                self.state = 358
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 360
                self.match(PCREParser.OpenParen)
                self.state = 361
                self.match(PCREParser.QuestionMark)
                self.state = 362
                self.match(PCREParser.LessThan)
                self.state = 363
                self.match(PCREParser.Equals)
                self.state = 364
                self.alternation()
                self.state = 365
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 367
                self.match(PCREParser.OpenParen)
                self.state = 368
                self.match(PCREParser.QuestionMark)
                self.state = 369
                self.match(PCREParser.LessThan)
                self.state = 370
                self.match(PCREParser.Exclamation)
                self.state = 371
                self.alternation()
                self.state = 372
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subroutine_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Subroutine_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(PCREParser.NumberContext,0)


        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_subroutine_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterSubroutine_reference"):
                listener.enterSubroutine_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubroutine_reference"):
                listener.exitSubroutine_reference(self)




    def subroutine_reference(self):

        localctx = PCREParser.Subroutine_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_subroutine_reference)
        try:
            self.state = 454
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 376
                self.match(PCREParser.OpenParen)
                self.state = 377
                self.match(PCREParser.QuestionMark)
                self.state = 378
                self.match(PCREParser.RUC)
                self.state = 379
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 380
                self.match(PCREParser.OpenParen)
                self.state = 381
                self.match(PCREParser.QuestionMark)
                self.state = 382
                self.number()
                self.state = 383
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 385
                self.match(PCREParser.OpenParen)
                self.state = 386
                self.match(PCREParser.QuestionMark)
                self.state = 387
                self.match(PCREParser.Plus)
                self.state = 388
                self.number()
                self.state = 389
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 391
                self.match(PCREParser.OpenParen)
                self.state = 392
                self.match(PCREParser.QuestionMark)
                self.state = 393
                self.match(PCREParser.Hyphen)
                self.state = 394
                self.number()
                self.state = 395
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 397
                self.match(PCREParser.OpenParen)
                self.state = 398
                self.match(PCREParser.QuestionMark)
                self.state = 399
                self.match(PCREParser.Ampersand)
                self.state = 400
                self.name()
                self.state = 401
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 403
                self.match(PCREParser.OpenParen)
                self.state = 404
                self.match(PCREParser.QuestionMark)
                self.state = 405
                self.match(PCREParser.PUC)
                self.state = 406
                self.match(PCREParser.GreaterThan)
                self.state = 407
                self.name()
                self.state = 408
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 410
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 411
                self.match(PCREParser.LessThan)
                self.state = 412
                self.name()
                self.state = 413
                self.match(PCREParser.GreaterThan)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 415
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 416
                self.match(PCREParser.SingleQuote)
                self.state = 417
                self.name()
                self.state = 418
                self.match(PCREParser.SingleQuote)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 420
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 421
                self.match(PCREParser.LessThan)
                self.state = 422
                self.number()
                self.state = 423
                self.match(PCREParser.GreaterThan)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 425
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 426
                self.match(PCREParser.SingleQuote)
                self.state = 427
                self.number()
                self.state = 428
                self.match(PCREParser.SingleQuote)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 430
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 431
                self.match(PCREParser.LessThan)
                self.state = 432
                self.match(PCREParser.Plus)
                self.state = 433
                self.number()
                self.state = 434
                self.match(PCREParser.GreaterThan)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 436
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 437
                self.match(PCREParser.SingleQuote)
                self.state = 438
                self.match(PCREParser.Plus)
                self.state = 439
                self.number()
                self.state = 440
                self.match(PCREParser.SingleQuote)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 442
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 443
                self.match(PCREParser.LessThan)
                self.state = 444
                self.match(PCREParser.Hyphen)
                self.state = 445
                self.number()
                self.state = 446
                self.match(PCREParser.GreaterThan)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 448
                self.match(PCREParser.SubroutineOrNamedReferenceStartG)
                self.state = 449
                self.match(PCREParser.SingleQuote)
                self.state = 450
                self.match(PCREParser.Hyphen)
                self.state = 451
                self.number()
                self.state = 452
                self.match(PCREParser.SingleQuote)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.ConditionalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(PCREParser.NumberContext,0)


        def alternation(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.AlternationContext)
            else:
                return self.getTypedRuleContext(PCREParser.AlternationContext,i)


        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_conditional

        def enterRule(self, listener):
            if hasattr(listener, "enterConditional"):
                listener.enterConditional(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditional"):
                listener.exitConditional(self)




    def conditional(self):

        localctx = PCREParser.ConditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_conditional)
        self._la = 0 # Token type
        try:
            self.state = 607
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.match(PCREParser.OpenParen)
                self.state = 457
                self.match(PCREParser.QuestionMark)
                self.state = 458
                self.match(PCREParser.OpenParen)
                self.state = 459
                self.number()
                self.state = 460
                self.match(PCREParser.CloseParen)
                self.state = 461
                self.alternation()
                self.state = 464
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 462
                    self.match(PCREParser.Pipe)
                    self.state = 463
                    self.alternation()


                self.state = 466
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 468
                self.match(PCREParser.OpenParen)
                self.state = 469
                self.match(PCREParser.QuestionMark)
                self.state = 470
                self.match(PCREParser.OpenParen)
                self.state = 471
                self.match(PCREParser.Plus)
                self.state = 472
                self.number()
                self.state = 473
                self.match(PCREParser.CloseParen)
                self.state = 474
                self.alternation()
                self.state = 477
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 475
                    self.match(PCREParser.Pipe)
                    self.state = 476
                    self.alternation()


                self.state = 479
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 481
                self.match(PCREParser.OpenParen)
                self.state = 482
                self.match(PCREParser.QuestionMark)
                self.state = 483
                self.match(PCREParser.OpenParen)
                self.state = 484
                self.match(PCREParser.Hyphen)
                self.state = 485
                self.number()
                self.state = 486
                self.match(PCREParser.CloseParen)
                self.state = 487
                self.alternation()
                self.state = 490
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 488
                    self.match(PCREParser.Pipe)
                    self.state = 489
                    self.alternation()


                self.state = 492
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 494
                self.match(PCREParser.OpenParen)
                self.state = 495
                self.match(PCREParser.QuestionMark)
                self.state = 496
                self.match(PCREParser.OpenParen)
                self.state = 497
                self.match(PCREParser.LessThan)
                self.state = 498
                self.name()
                self.state = 499
                self.match(PCREParser.GreaterThan)
                self.state = 500
                self.match(PCREParser.CloseParen)
                self.state = 501
                self.alternation()
                self.state = 504
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 502
                    self.match(PCREParser.Pipe)
                    self.state = 503
                    self.alternation()


                self.state = 506
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 508
                self.match(PCREParser.OpenParen)
                self.state = 509
                self.match(PCREParser.QuestionMark)
                self.state = 510
                self.match(PCREParser.OpenParen)
                self.state = 511
                self.match(PCREParser.SingleQuote)
                self.state = 512
                self.name()
                self.state = 513
                self.match(PCREParser.SingleQuote)
                self.state = 514
                self.match(PCREParser.CloseParen)
                self.state = 515
                self.alternation()
                self.state = 518
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 516
                    self.match(PCREParser.Pipe)
                    self.state = 517
                    self.alternation()


                self.state = 520
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 522
                self.match(PCREParser.OpenParen)
                self.state = 523
                self.match(PCREParser.QuestionMark)
                self.state = 524
                self.match(PCREParser.OpenParen)
                self.state = 525
                self.match(PCREParser.RUC)
                self.state = 526
                self.number()
                self.state = 527
                self.match(PCREParser.CloseParen)
                self.state = 528
                self.alternation()
                self.state = 531
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 529
                    self.match(PCREParser.Pipe)
                    self.state = 530
                    self.alternation()


                self.state = 533
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 535
                self.match(PCREParser.OpenParen)
                self.state = 536
                self.match(PCREParser.QuestionMark)
                self.state = 537
                self.match(PCREParser.OpenParen)
                self.state = 538
                self.match(PCREParser.RUC)
                self.state = 539
                self.match(PCREParser.CloseParen)
                self.state = 540
                self.alternation()
                self.state = 543
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 541
                    self.match(PCREParser.Pipe)
                    self.state = 542
                    self.alternation()


                self.state = 545
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 547
                self.match(PCREParser.OpenParen)
                self.state = 548
                self.match(PCREParser.QuestionMark)
                self.state = 549
                self.match(PCREParser.OpenParen)
                self.state = 550
                self.match(PCREParser.RUC)
                self.state = 551
                self.match(PCREParser.Ampersand)
                self.state = 552
                self.name()
                self.state = 553
                self.match(PCREParser.CloseParen)
                self.state = 554
                self.alternation()
                self.state = 557
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 555
                    self.match(PCREParser.Pipe)
                    self.state = 556
                    self.alternation()


                self.state = 559
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 561
                self.match(PCREParser.OpenParen)
                self.state = 562
                self.match(PCREParser.QuestionMark)
                self.state = 563
                self.match(PCREParser.OpenParen)
                self.state = 564
                self.match(PCREParser.DUC)
                self.state = 565
                self.match(PCREParser.EUC)
                self.state = 566
                self.match(PCREParser.FUC)
                self.state = 567
                self.match(PCREParser.IUC)
                self.state = 568
                self.match(PCREParser.NUC)
                self.state = 569
                self.match(PCREParser.EUC)
                self.state = 570
                self.match(PCREParser.CloseParen)
                self.state = 571
                self.alternation()
                self.state = 574
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 572
                    self.match(PCREParser.Pipe)
                    self.state = 573
                    self.alternation()


                self.state = 576
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 578
                self.match(PCREParser.OpenParen)
                self.state = 579
                self.match(PCREParser.QuestionMark)
                self.state = 580
                self.match(PCREParser.OpenParen)
                self.state = 581
                self.match(PCREParser.ALC)
                self.state = 582
                self.match(PCREParser.SLC)
                self.state = 583
                self.match(PCREParser.SLC)
                self.state = 584
                self.match(PCREParser.ELC)
                self.state = 585
                self.match(PCREParser.RLC)
                self.state = 586
                self.match(PCREParser.TLC)
                self.state = 587
                self.match(PCREParser.CloseParen)
                self.state = 588
                self.alternation()
                self.state = 591
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 589
                    self.match(PCREParser.Pipe)
                    self.state = 590
                    self.alternation()


                self.state = 593
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 595
                self.match(PCREParser.OpenParen)
                self.state = 596
                self.match(PCREParser.QuestionMark)
                self.state = 597
                self.match(PCREParser.OpenParen)
                self.state = 598
                self.name()
                self.state = 599
                self.match(PCREParser.CloseParen)
                self.state = 600
                self.alternation()
                self.state = 603
                _la = self._input.LA(1)
                if _la==PCREParser.Pipe:
                    self.state = 601
                    self.match(PCREParser.Pipe)
                    self.state = 602
                    self.alternation()


                self.state = 605
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Backtrack_controlContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Backtrack_controlContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PCREParser.RULE_backtrack_control

        def enterRule(self, listener):
            if hasattr(listener, "enterBacktrack_control"):
                listener.enterBacktrack_control(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBacktrack_control"):
                listener.exitBacktrack_control(self)




    def backtrack_control(self):

        localctx = PCREParser.Backtrack_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_backtrack_control)
        self._la = 0 # Token type
        try:
            self.state = 709
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(PCREParser.OpenParen)
                self.state = 610
                self.match(PCREParser.Star)
                self.state = 611
                self.match(PCREParser.AUC)
                self.state = 612
                self.match(PCREParser.CUC)
                self.state = 613
                self.match(PCREParser.CUC)
                self.state = 614
                self.match(PCREParser.EUC)
                self.state = 615
                self.match(PCREParser.PUC)
                self.state = 616
                self.match(PCREParser.TUC)
                self.state = 617
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.match(PCREParser.OpenParen)
                self.state = 619
                self.match(PCREParser.Star)
                self.state = 620
                self.match(PCREParser.FUC)
                self.state = 624
                _la = self._input.LA(1)
                if _la==PCREParser.AUC:
                    self.state = 621
                    self.match(PCREParser.AUC)
                    self.state = 622
                    self.match(PCREParser.IUC)
                    self.state = 623
                    self.match(PCREParser.LUC)


                self.state = 626
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.match(PCREParser.OpenParen)
                self.state = 628
                self.match(PCREParser.Star)
                self.state = 633
                _la = self._input.LA(1)
                if _la==PCREParser.MUC:
                    self.state = 629
                    self.match(PCREParser.MUC)
                    self.state = 630
                    self.match(PCREParser.AUC)
                    self.state = 631
                    self.match(PCREParser.RUC)
                    self.state = 632
                    self.match(PCREParser.KUC)


                self.state = 635
                self.match(PCREParser.Colon)
                self.state = 636
                self.match(PCREParser.NUC)
                self.state = 637
                self.match(PCREParser.AUC)
                self.state = 638
                self.match(PCREParser.MUC)
                self.state = 639
                self.match(PCREParser.EUC)
                self.state = 640
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 641
                self.match(PCREParser.OpenParen)
                self.state = 642
                self.match(PCREParser.Star)
                self.state = 643
                self.match(PCREParser.CUC)
                self.state = 644
                self.match(PCREParser.OUC)
                self.state = 645
                self.match(PCREParser.MUC)
                self.state = 646
                self.match(PCREParser.MUC)
                self.state = 647
                self.match(PCREParser.IUC)
                self.state = 648
                self.match(PCREParser.TUC)
                self.state = 649
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 650
                self.match(PCREParser.OpenParen)
                self.state = 651
                self.match(PCREParser.Star)
                self.state = 652
                self.match(PCREParser.PUC)
                self.state = 653
                self.match(PCREParser.RUC)
                self.state = 654
                self.match(PCREParser.UUC)
                self.state = 655
                self.match(PCREParser.NUC)
                self.state = 656
                self.match(PCREParser.EUC)
                self.state = 657
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 658
                self.match(PCREParser.OpenParen)
                self.state = 659
                self.match(PCREParser.Star)
                self.state = 660
                self.match(PCREParser.PUC)
                self.state = 661
                self.match(PCREParser.RUC)
                self.state = 662
                self.match(PCREParser.UUC)
                self.state = 663
                self.match(PCREParser.NUC)
                self.state = 664
                self.match(PCREParser.EUC)
                self.state = 665
                self.match(PCREParser.Colon)
                self.state = 666
                self.match(PCREParser.NUC)
                self.state = 667
                self.match(PCREParser.AUC)
                self.state = 668
                self.match(PCREParser.MUC)
                self.state = 669
                self.match(PCREParser.EUC)
                self.state = 670
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 671
                self.match(PCREParser.OpenParen)
                self.state = 672
                self.match(PCREParser.Star)
                self.state = 673
                self.match(PCREParser.SUC)
                self.state = 674
                self.match(PCREParser.KUC)
                self.state = 675
                self.match(PCREParser.IUC)
                self.state = 676
                self.match(PCREParser.PUC)
                self.state = 677
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 678
                self.match(PCREParser.OpenParen)
                self.state = 679
                self.match(PCREParser.Star)
                self.state = 680
                self.match(PCREParser.SUC)
                self.state = 681
                self.match(PCREParser.KUC)
                self.state = 682
                self.match(PCREParser.IUC)
                self.state = 683
                self.match(PCREParser.PUC)
                self.state = 684
                self.match(PCREParser.Colon)
                self.state = 685
                self.match(PCREParser.NUC)
                self.state = 686
                self.match(PCREParser.AUC)
                self.state = 687
                self.match(PCREParser.MUC)
                self.state = 688
                self.match(PCREParser.EUC)
                self.state = 689
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 690
                self.match(PCREParser.OpenParen)
                self.state = 691
                self.match(PCREParser.Star)
                self.state = 692
                self.match(PCREParser.TUC)
                self.state = 693
                self.match(PCREParser.HUC)
                self.state = 694
                self.match(PCREParser.EUC)
                self.state = 695
                self.match(PCREParser.NUC)
                self.state = 696
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 697
                self.match(PCREParser.OpenParen)
                self.state = 698
                self.match(PCREParser.Star)
                self.state = 699
                self.match(PCREParser.TUC)
                self.state = 700
                self.match(PCREParser.HUC)
                self.state = 701
                self.match(PCREParser.EUC)
                self.state = 702
                self.match(PCREParser.NUC)
                self.state = 703
                self.match(PCREParser.Colon)
                self.state = 704
                self.match(PCREParser.NUC)
                self.state = 705
                self.match(PCREParser.AUC)
                self.state = 706
                self.match(PCREParser.MUC)
                self.state = 707
                self.match(PCREParser.EUC)
                self.state = 708
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Newline_conventionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Newline_conventionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PCREParser.RULE_newline_convention

        def enterRule(self, listener):
            if hasattr(listener, "enterNewline_convention"):
                listener.enterNewline_convention(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNewline_convention"):
                listener.exitNewline_convention(self)




    def newline_convention(self):

        localctx = PCREParser.Newline_conventionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_newline_convention)
        try:
            self.state = 772
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.match(PCREParser.OpenParen)
                self.state = 712
                self.match(PCREParser.Star)
                self.state = 713
                self.match(PCREParser.CUC)
                self.state = 714
                self.match(PCREParser.RUC)
                self.state = 715
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.match(PCREParser.OpenParen)
                self.state = 717
                self.match(PCREParser.Star)
                self.state = 718
                self.match(PCREParser.LUC)
                self.state = 719
                self.match(PCREParser.FUC)
                self.state = 720
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.match(PCREParser.OpenParen)
                self.state = 722
                self.match(PCREParser.Star)
                self.state = 723
                self.match(PCREParser.CUC)
                self.state = 724
                self.match(PCREParser.RUC)
                self.state = 725
                self.match(PCREParser.LUC)
                self.state = 726
                self.match(PCREParser.FUC)
                self.state = 727
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 728
                self.match(PCREParser.OpenParen)
                self.state = 729
                self.match(PCREParser.Star)
                self.state = 730
                self.match(PCREParser.AUC)
                self.state = 731
                self.match(PCREParser.NUC)
                self.state = 732
                self.match(PCREParser.YUC)
                self.state = 733
                self.match(PCREParser.CUC)
                self.state = 734
                self.match(PCREParser.RUC)
                self.state = 735
                self.match(PCREParser.LUC)
                self.state = 736
                self.match(PCREParser.FUC)
                self.state = 737
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 738
                self.match(PCREParser.OpenParen)
                self.state = 739
                self.match(PCREParser.Star)
                self.state = 740
                self.match(PCREParser.AUC)
                self.state = 741
                self.match(PCREParser.NUC)
                self.state = 742
                self.match(PCREParser.YUC)
                self.state = 743
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 744
                self.match(PCREParser.OpenParen)
                self.state = 745
                self.match(PCREParser.Star)
                self.state = 746
                self.match(PCREParser.BUC)
                self.state = 747
                self.match(PCREParser.SUC)
                self.state = 748
                self.match(PCREParser.RUC)
                self.state = 749
                self.match(PCREParser.Underscore)
                self.state = 750
                self.match(PCREParser.AUC)
                self.state = 751
                self.match(PCREParser.NUC)
                self.state = 752
                self.match(PCREParser.YUC)
                self.state = 753
                self.match(PCREParser.CUC)
                self.state = 754
                self.match(PCREParser.RUC)
                self.state = 755
                self.match(PCREParser.LUC)
                self.state = 756
                self.match(PCREParser.FUC)
                self.state = 757
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 758
                self.match(PCREParser.OpenParen)
                self.state = 759
                self.match(PCREParser.Star)
                self.state = 760
                self.match(PCREParser.BUC)
                self.state = 761
                self.match(PCREParser.SUC)
                self.state = 762
                self.match(PCREParser.RUC)
                self.state = 763
                self.match(PCREParser.Underscore)
                self.state = 764
                self.match(PCREParser.UUC)
                self.state = 765
                self.match(PCREParser.NUC)
                self.state = 766
                self.match(PCREParser.IUC)
                self.state = 767
                self.match(PCREParser.CUC)
                self.state = 768
                self.match(PCREParser.OUC)
                self.state = 769
                self.match(PCREParser.DUC)
                self.state = 770
                self.match(PCREParser.EUC)
                self.state = 771
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalloutContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.CalloutContext, self).__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(PCREParser.NumberContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_callout

        def enterRule(self, listener):
            if hasattr(listener, "enterCallout"):
                listener.enterCallout(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallout"):
                listener.exitCallout(self)




    def callout(self):

        localctx = PCREParser.CalloutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_callout)
        try:
            self.state = 784
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.match(PCREParser.OpenParen)
                self.state = 775
                self.match(PCREParser.QuestionMark)
                self.state = 776
                self.match(PCREParser.CUC)
                self.state = 777
                self.match(PCREParser.CloseParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.match(PCREParser.OpenParen)
                self.state = 779
                self.match(PCREParser.QuestionMark)
                self.state = 780
                self.match(PCREParser.CUC)
                self.state = 781
                self.number()
                self.state = 782
                self.match(PCREParser.CloseParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def subroutine_reference(self):
            return self.getTypedRuleContext(PCREParser.Subroutine_referenceContext,0)


        def shared_atom(self):
            return self.getTypedRuleContext(PCREParser.Shared_atomContext,0)


        def pcre_literal(self):
            return self.getTypedRuleContext(PCREParser.Pcre_literalContext,0)


        def character_class(self):
            return self.getTypedRuleContext(PCREParser.Character_classContext,0)


        def capture(self):
            return self.getTypedRuleContext(PCREParser.CaptureContext,0)


        def non_capture(self):
            return self.getTypedRuleContext(PCREParser.Non_captureContext,0)


        def comment(self):
            return self.getTypedRuleContext(PCREParser.CommentContext,0)


        def option(self):
            return self.getTypedRuleContext(PCREParser.OptionContext,0)


        def look_around(self):
            return self.getTypedRuleContext(PCREParser.Look_aroundContext,0)


        def backreference(self):
            return self.getTypedRuleContext(PCREParser.BackreferenceContext,0)


        def conditional(self):
            return self.getTypedRuleContext(PCREParser.ConditionalContext,0)


        def backtrack_control(self):
            return self.getTypedRuleContext(PCREParser.Backtrack_controlContext,0)


        def newline_convention(self):
            return self.getTypedRuleContext(PCREParser.Newline_conventionContext,0)


        def callout(self):
            return self.getTypedRuleContext(PCREParser.CalloutContext,0)


        def Dot(self):
            return self.getToken(PCREParser.Dot, 0)

        def Caret(self):
            return self.getToken(PCREParser.Caret, 0)

        def StartOfSubject(self):
            return self.getToken(PCREParser.StartOfSubject, 0)

        def WordBoundary(self):
            return self.getToken(PCREParser.WordBoundary, 0)

        def NonWordBoundary(self):
            return self.getToken(PCREParser.NonWordBoundary, 0)

        def EndOfSubjectOrLine(self):
            return self.getToken(PCREParser.EndOfSubjectOrLine, 0)

        def EndOfSubjectOrLineEndOfSubject(self):
            return self.getToken(PCREParser.EndOfSubjectOrLineEndOfSubject, 0)

        def EndOfSubject(self):
            return self.getToken(PCREParser.EndOfSubject, 0)

        def PreviousMatchInSubject(self):
            return self.getToken(PCREParser.PreviousMatchInSubject, 0)

        def ResetStartMatch(self):
            return self.getToken(PCREParser.ResetStartMatch, 0)

        def OneDataUnit(self):
            return self.getToken(PCREParser.OneDataUnit, 0)

        def ExtendedUnicodeChar(self):
            return self.getToken(PCREParser.ExtendedUnicodeChar, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_atom

        def enterRule(self, listener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)




    def atom(self):

        localctx = PCREParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_atom)
        try:
            self.state = 812
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.subroutine_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.shared_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.pcre_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 789
                self.character_class()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 790
                self.capture()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 791
                self.non_capture()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 792
                self.comment()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 793
                self.option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 794
                self.look_around()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 795
                self.backreference()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 796
                self.conditional()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 797
                self.backtrack_control()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 798
                self.newline_convention()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 799
                self.callout()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 800
                self.match(PCREParser.Dot)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 801
                self.match(PCREParser.Caret)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 802
                self.match(PCREParser.StartOfSubject)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 803
                self.match(PCREParser.WordBoundary)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 804
                self.match(PCREParser.NonWordBoundary)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 805
                self.match(PCREParser.EndOfSubjectOrLine)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 806
                self.match(PCREParser.EndOfSubjectOrLineEndOfSubject)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 807
                self.match(PCREParser.EndOfSubject)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 808
                self.match(PCREParser.PreviousMatchInSubject)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 809
                self.match(PCREParser.ResetStartMatch)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 810
                self.match(PCREParser.OneDataUnit)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 811
                self.match(PCREParser.ExtendedUnicodeChar)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cc_atomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Cc_atomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cc_literal(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Cc_literalContext)
            else:
                return self.getTypedRuleContext(PCREParser.Cc_literalContext,i)


        def Hyphen(self):
            return self.getToken(PCREParser.Hyphen, 0)

        def shared_atom(self):
            return self.getTypedRuleContext(PCREParser.Shared_atomContext,0)


        def backreference_or_octal(self):
            return self.getTypedRuleContext(PCREParser.Backreference_or_octalContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_cc_atom

        def enterRule(self, listener):
            if hasattr(listener, "enterCc_atom"):
                listener.enterCc_atom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCc_atom"):
                listener.exitCc_atom(self)




    def cc_atom(self):

        localctx = PCREParser.Cc_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_cc_atom)
        try:
            self.state = 821
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.cc_literal()
                self.state = 815
                self.match(PCREParser.Hyphen)
                self.state = 816
                self.cc_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 818
                self.shared_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 819
                self.cc_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 820
                self.backreference_or_octal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shared_atomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Shared_atomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def POSIXNamedSet(self):
            return self.getToken(PCREParser.POSIXNamedSet, 0)

        def POSIXNegatedNamedSet(self):
            return self.getToken(PCREParser.POSIXNegatedNamedSet, 0)

        def ControlChar(self):
            return self.getToken(PCREParser.ControlChar, 0)

        def DecimalDigit(self):
            return self.getToken(PCREParser.DecimalDigit, 0)

        def NotDecimalDigit(self):
            return self.getToken(PCREParser.NotDecimalDigit, 0)

        def HorizontalWhiteSpace(self):
            return self.getToken(PCREParser.HorizontalWhiteSpace, 0)

        def NotHorizontalWhiteSpace(self):
            return self.getToken(PCREParser.NotHorizontalWhiteSpace, 0)

        def NotNewLine(self):
            return self.getToken(PCREParser.NotNewLine, 0)

        def CharWithProperty(self):
            return self.getToken(PCREParser.CharWithProperty, 0)

        def CharWithoutProperty(self):
            return self.getToken(PCREParser.CharWithoutProperty, 0)

        def NewLineSequence(self):
            return self.getToken(PCREParser.NewLineSequence, 0)

        def WhiteSpace(self):
            return self.getToken(PCREParser.WhiteSpace, 0)

        def NotWhiteSpace(self):
            return self.getToken(PCREParser.NotWhiteSpace, 0)

        def VerticalWhiteSpace(self):
            return self.getToken(PCREParser.VerticalWhiteSpace, 0)

        def NotVerticalWhiteSpace(self):
            return self.getToken(PCREParser.NotVerticalWhiteSpace, 0)

        def WordChar(self):
            return self.getToken(PCREParser.WordChar, 0)

        def NotWordChar(self):
            return self.getToken(PCREParser.NotWordChar, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_shared_atom

        def enterRule(self, listener):
            if hasattr(listener, "enterShared_atom"):
                listener.enterShared_atom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShared_atom"):
                listener.exitShared_atom(self)




    def shared_atom(self):

        localctx = PCREParser.Shared_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_shared_atom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.ControlChar) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pcre_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Pcre_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def shared_literal(self):
            return self.getTypedRuleContext(PCREParser.Shared_literalContext,0)


        def CharacterClassEnd(self):
            return self.getToken(PCREParser.CharacterClassEnd, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_pcre_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterPcre_literal"):
                listener.enterPcre_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPcre_literal"):
                listener.exitPcre_literal(self)




    def pcre_literal(self):

        localctx = PCREParser.Pcre_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pcre_literal)
        try:
            self.state = 827
            token = self._input.LA(1)
            if token in [PCREParser.Quoted, PCREParser.BlockQuoted, PCREParser.BellChar, PCREParser.EscapeChar, PCREParser.FormFeed, PCREParser.NewLine, PCREParser.CarriageReturn, PCREParser.Tab, PCREParser.Backslash, PCREParser.HexChar, PCREParser.Hyphen, PCREParser.OpenBrace, PCREParser.CloseBrace, PCREParser.Comma, PCREParser.LessThan, PCREParser.GreaterThan, PCREParser.SingleQuote, PCREParser.Underscore, PCREParser.Colon, PCREParser.Hash, PCREParser.Equals, PCREParser.Exclamation, PCREParser.Ampersand, PCREParser.ALC, PCREParser.BLC, PCREParser.CLC, PCREParser.DLC, PCREParser.ELC, PCREParser.FLC, PCREParser.GLC, PCREParser.HLC, PCREParser.ILC, PCREParser.JLC, PCREParser.KLC, PCREParser.LLC, PCREParser.MLC, PCREParser.NLC, PCREParser.OLC, PCREParser.PLC, PCREParser.QLC, PCREParser.RLC, PCREParser.SLC, PCREParser.TLC, PCREParser.ULC, PCREParser.VLC, PCREParser.WLC, PCREParser.XLC, PCREParser.YLC, PCREParser.ZLC, PCREParser.AUC, PCREParser.BUC, PCREParser.CUC, PCREParser.DUC, PCREParser.EUC, PCREParser.FUC, PCREParser.GUC, PCREParser.HUC, PCREParser.IUC, PCREParser.JUC, PCREParser.KUC, PCREParser.LUC, PCREParser.MUC, PCREParser.NUC, PCREParser.OUC, PCREParser.PUC, PCREParser.QUC, PCREParser.RUC, PCREParser.SUC, PCREParser.TUC, PCREParser.UUC, PCREParser.VUC, PCREParser.WUC, PCREParser.XUC, PCREParser.YUC, PCREParser.ZUC, PCREParser.D1, PCREParser.D2, PCREParser.D3, PCREParser.D4, PCREParser.D5, PCREParser.D6, PCREParser.D7, PCREParser.D8, PCREParser.D9, PCREParser.D0, PCREParser.OtherChar]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.shared_literal()

            elif token in [PCREParser.CharacterClassEnd]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.match(PCREParser.CharacterClassEnd)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cc_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Cc_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def shared_literal(self):
            return self.getTypedRuleContext(PCREParser.Shared_literalContext,0)


        def Dot(self):
            return self.getToken(PCREParser.Dot, 0)

        def CharacterClassStart(self):
            return self.getToken(PCREParser.CharacterClassStart, 0)

        def Caret(self):
            return self.getToken(PCREParser.Caret, 0)

        def QuestionMark(self):
            return self.getToken(PCREParser.QuestionMark, 0)

        def Plus(self):
            return self.getToken(PCREParser.Plus, 0)

        def Star(self):
            return self.getToken(PCREParser.Star, 0)

        def WordBoundary(self):
            return self.getToken(PCREParser.WordBoundary, 0)

        def EndOfSubjectOrLine(self):
            return self.getToken(PCREParser.EndOfSubjectOrLine, 0)

        def Pipe(self):
            return self.getToken(PCREParser.Pipe, 0)

        def OpenParen(self):
            return self.getToken(PCREParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(PCREParser.CloseParen, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_cc_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterCc_literal"):
                listener.enterCc_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCc_literal"):
                listener.exitCc_literal(self)




    def cc_literal(self):

        localctx = PCREParser.Cc_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_cc_literal)
        try:
            self.state = 841
            token = self._input.LA(1)
            if token in [PCREParser.Quoted, PCREParser.BlockQuoted, PCREParser.BellChar, PCREParser.EscapeChar, PCREParser.FormFeed, PCREParser.NewLine, PCREParser.CarriageReturn, PCREParser.Tab, PCREParser.Backslash, PCREParser.HexChar, PCREParser.Hyphen, PCREParser.OpenBrace, PCREParser.CloseBrace, PCREParser.Comma, PCREParser.LessThan, PCREParser.GreaterThan, PCREParser.SingleQuote, PCREParser.Underscore, PCREParser.Colon, PCREParser.Hash, PCREParser.Equals, PCREParser.Exclamation, PCREParser.Ampersand, PCREParser.ALC, PCREParser.BLC, PCREParser.CLC, PCREParser.DLC, PCREParser.ELC, PCREParser.FLC, PCREParser.GLC, PCREParser.HLC, PCREParser.ILC, PCREParser.JLC, PCREParser.KLC, PCREParser.LLC, PCREParser.MLC, PCREParser.NLC, PCREParser.OLC, PCREParser.PLC, PCREParser.QLC, PCREParser.RLC, PCREParser.SLC, PCREParser.TLC, PCREParser.ULC, PCREParser.VLC, PCREParser.WLC, PCREParser.XLC, PCREParser.YLC, PCREParser.ZLC, PCREParser.AUC, PCREParser.BUC, PCREParser.CUC, PCREParser.DUC, PCREParser.EUC, PCREParser.FUC, PCREParser.GUC, PCREParser.HUC, PCREParser.IUC, PCREParser.JUC, PCREParser.KUC, PCREParser.LUC, PCREParser.MUC, PCREParser.NUC, PCREParser.OUC, PCREParser.PUC, PCREParser.QUC, PCREParser.RUC, PCREParser.SUC, PCREParser.TUC, PCREParser.UUC, PCREParser.VUC, PCREParser.WUC, PCREParser.XUC, PCREParser.YUC, PCREParser.ZUC, PCREParser.D1, PCREParser.D2, PCREParser.D3, PCREParser.D4, PCREParser.D5, PCREParser.D6, PCREParser.D7, PCREParser.D8, PCREParser.D9, PCREParser.D0, PCREParser.OtherChar]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.shared_literal()

            elif token in [PCREParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.match(PCREParser.Dot)

            elif token in [PCREParser.CharacterClassStart]:
                self.enterOuterAlt(localctx, 3)
                self.state = 831
                self.match(PCREParser.CharacterClassStart)

            elif token in [PCREParser.Caret]:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.match(PCREParser.Caret)

            elif token in [PCREParser.QuestionMark]:
                self.enterOuterAlt(localctx, 5)
                self.state = 833
                self.match(PCREParser.QuestionMark)

            elif token in [PCREParser.Plus]:
                self.enterOuterAlt(localctx, 6)
                self.state = 834
                self.match(PCREParser.Plus)

            elif token in [PCREParser.Star]:
                self.enterOuterAlt(localctx, 7)
                self.state = 835
                self.match(PCREParser.Star)

            elif token in [PCREParser.WordBoundary]:
                self.enterOuterAlt(localctx, 8)
                self.state = 836
                self.match(PCREParser.WordBoundary)

            elif token in [PCREParser.EndOfSubjectOrLine]:
                self.enterOuterAlt(localctx, 9)
                self.state = 837
                self.match(PCREParser.EndOfSubjectOrLine)

            elif token in [PCREParser.Pipe]:
                self.enterOuterAlt(localctx, 10)
                self.state = 838
                self.match(PCREParser.Pipe)

            elif token in [PCREParser.OpenParen]:
                self.enterOuterAlt(localctx, 11)
                self.state = 839
                self.match(PCREParser.OpenParen)

            elif token in [PCREParser.CloseParen]:
                self.enterOuterAlt(localctx, 12)
                self.state = 840
                self.match(PCREParser.CloseParen)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shared_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Shared_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def octal_char(self):
            return self.getTypedRuleContext(PCREParser.Octal_charContext,0)


        def letter(self):
            return self.getTypedRuleContext(PCREParser.LetterContext,0)


        def digit(self):
            return self.getTypedRuleContext(PCREParser.DigitContext,0)


        def BellChar(self):
            return self.getToken(PCREParser.BellChar, 0)

        def EscapeChar(self):
            return self.getToken(PCREParser.EscapeChar, 0)

        def FormFeed(self):
            return self.getToken(PCREParser.FormFeed, 0)

        def NewLine(self):
            return self.getToken(PCREParser.NewLine, 0)

        def CarriageReturn(self):
            return self.getToken(PCREParser.CarriageReturn, 0)

        def Tab(self):
            return self.getToken(PCREParser.Tab, 0)

        def HexChar(self):
            return self.getToken(PCREParser.HexChar, 0)

        def Quoted(self):
            return self.getToken(PCREParser.Quoted, 0)

        def BlockQuoted(self):
            return self.getToken(PCREParser.BlockQuoted, 0)

        def OpenBrace(self):
            return self.getToken(PCREParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PCREParser.CloseBrace, 0)

        def Comma(self):
            return self.getToken(PCREParser.Comma, 0)

        def Hyphen(self):
            return self.getToken(PCREParser.Hyphen, 0)

        def LessThan(self):
            return self.getToken(PCREParser.LessThan, 0)

        def GreaterThan(self):
            return self.getToken(PCREParser.GreaterThan, 0)

        def SingleQuote(self):
            return self.getToken(PCREParser.SingleQuote, 0)

        def Underscore(self):
            return self.getToken(PCREParser.Underscore, 0)

        def Colon(self):
            return self.getToken(PCREParser.Colon, 0)

        def Hash(self):
            return self.getToken(PCREParser.Hash, 0)

        def Equals(self):
            return self.getToken(PCREParser.Equals, 0)

        def Exclamation(self):
            return self.getToken(PCREParser.Exclamation, 0)

        def Ampersand(self):
            return self.getToken(PCREParser.Ampersand, 0)

        def OtherChar(self):
            return self.getToken(PCREParser.OtherChar, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_shared_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterShared_literal"):
                listener.enterShared_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShared_literal"):
                listener.exitShared_literal(self)




    def shared_literal(self):

        localctx = PCREParser.Shared_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_shared_literal)
        try:
            self.state = 869
            token = self._input.LA(1)
            if token in [PCREParser.Backslash]:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.octal_char()

            elif token in [PCREParser.ALC, PCREParser.BLC, PCREParser.CLC, PCREParser.DLC, PCREParser.ELC, PCREParser.FLC, PCREParser.GLC, PCREParser.HLC, PCREParser.ILC, PCREParser.JLC, PCREParser.KLC, PCREParser.LLC, PCREParser.MLC, PCREParser.NLC, PCREParser.OLC, PCREParser.PLC, PCREParser.QLC, PCREParser.RLC, PCREParser.SLC, PCREParser.TLC, PCREParser.ULC, PCREParser.VLC, PCREParser.WLC, PCREParser.XLC, PCREParser.YLC, PCREParser.ZLC, PCREParser.AUC, PCREParser.BUC, PCREParser.CUC, PCREParser.DUC, PCREParser.EUC, PCREParser.FUC, PCREParser.GUC, PCREParser.HUC, PCREParser.IUC, PCREParser.JUC, PCREParser.KUC, PCREParser.LUC, PCREParser.MUC, PCREParser.NUC, PCREParser.OUC, PCREParser.PUC, PCREParser.QUC, PCREParser.RUC, PCREParser.SUC, PCREParser.TUC, PCREParser.UUC, PCREParser.VUC, PCREParser.WUC, PCREParser.XUC, PCREParser.YUC, PCREParser.ZUC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.letter()

            elif token in [PCREParser.D1, PCREParser.D2, PCREParser.D3, PCREParser.D4, PCREParser.D5, PCREParser.D6, PCREParser.D7, PCREParser.D8, PCREParser.D9, PCREParser.D0]:
                self.enterOuterAlt(localctx, 3)
                self.state = 845
                self.digit()

            elif token in [PCREParser.BellChar]:
                self.enterOuterAlt(localctx, 4)
                self.state = 846
                self.match(PCREParser.BellChar)

            elif token in [PCREParser.EscapeChar]:
                self.enterOuterAlt(localctx, 5)
                self.state = 847
                self.match(PCREParser.EscapeChar)

            elif token in [PCREParser.FormFeed]:
                self.enterOuterAlt(localctx, 6)
                self.state = 848
                self.match(PCREParser.FormFeed)

            elif token in [PCREParser.NewLine]:
                self.enterOuterAlt(localctx, 7)
                self.state = 849
                self.match(PCREParser.NewLine)

            elif token in [PCREParser.CarriageReturn]:
                self.enterOuterAlt(localctx, 8)
                self.state = 850
                self.match(PCREParser.CarriageReturn)

            elif token in [PCREParser.Tab]:
                self.enterOuterAlt(localctx, 9)
                self.state = 851
                self.match(PCREParser.Tab)

            elif token in [PCREParser.HexChar]:
                self.enterOuterAlt(localctx, 10)
                self.state = 852
                self.match(PCREParser.HexChar)

            elif token in [PCREParser.Quoted]:
                self.enterOuterAlt(localctx, 11)
                self.state = 853
                self.match(PCREParser.Quoted)

            elif token in [PCREParser.BlockQuoted]:
                self.enterOuterAlt(localctx, 12)
                self.state = 854
                self.match(PCREParser.BlockQuoted)

            elif token in [PCREParser.OpenBrace]:
                self.enterOuterAlt(localctx, 13)
                self.state = 855
                self.match(PCREParser.OpenBrace)

            elif token in [PCREParser.CloseBrace]:
                self.enterOuterAlt(localctx, 14)
                self.state = 856
                self.match(PCREParser.CloseBrace)

            elif token in [PCREParser.Comma]:
                self.enterOuterAlt(localctx, 15)
                self.state = 857
                self.match(PCREParser.Comma)

            elif token in [PCREParser.Hyphen]:
                self.enterOuterAlt(localctx, 16)
                self.state = 858
                self.match(PCREParser.Hyphen)

            elif token in [PCREParser.LessThan]:
                self.enterOuterAlt(localctx, 17)
                self.state = 859
                self.match(PCREParser.LessThan)

            elif token in [PCREParser.GreaterThan]:
                self.enterOuterAlt(localctx, 18)
                self.state = 860
                self.match(PCREParser.GreaterThan)

            elif token in [PCREParser.SingleQuote]:
                self.enterOuterAlt(localctx, 19)
                self.state = 861
                self.match(PCREParser.SingleQuote)

            elif token in [PCREParser.Underscore]:
                self.enterOuterAlt(localctx, 20)
                self.state = 862
                self.match(PCREParser.Underscore)

            elif token in [PCREParser.Colon]:
                self.enterOuterAlt(localctx, 21)
                self.state = 863
                self.match(PCREParser.Colon)

            elif token in [PCREParser.Hash]:
                self.enterOuterAlt(localctx, 22)
                self.state = 864
                self.match(PCREParser.Hash)

            elif token in [PCREParser.Equals]:
                self.enterOuterAlt(localctx, 23)
                self.state = 865
                self.match(PCREParser.Equals)

            elif token in [PCREParser.Exclamation]:
                self.enterOuterAlt(localctx, 24)
                self.state = 866
                self.match(PCREParser.Exclamation)

            elif token in [PCREParser.Ampersand]:
                self.enterOuterAlt(localctx, 25)
                self.state = 867
                self.match(PCREParser.Ampersand)

            elif token in [PCREParser.OtherChar]:
                self.enterOuterAlt(localctx, 26)
                self.state = 868
                self.match(PCREParser.OtherChar)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.NumberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def digits(self):
            return self.getTypedRuleContext(PCREParser.DigitsContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_number

        def enterRule(self, listener):
            if hasattr(listener, "enterNumber"):
                listener.enterNumber(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNumber"):
                listener.exitNumber(self)




    def number(self):

        localctx = PCREParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.digits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Octal_charContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Octal_charContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Backslash(self):
            return self.getToken(PCREParser.Backslash, 0)

        def octal_digit(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Octal_digitContext)
            else:
                return self.getTypedRuleContext(PCREParser.Octal_digitContext,i)


        def D0(self):
            return self.getToken(PCREParser.D0, 0)

        def D1(self):
            return self.getToken(PCREParser.D1, 0)

        def D2(self):
            return self.getToken(PCREParser.D2, 0)

        def D3(self):
            return self.getToken(PCREParser.D3, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_octal_char

        def enterRule(self, listener):
            if hasattr(listener, "enterOctal_char"):
                listener.enterOctal_char(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOctal_char"):
                listener.exitOctal_char(self)




    def octal_char(self):

        localctx = PCREParser.Octal_charContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_octal_char)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 873
                self.match(PCREParser.Backslash)
                self.state = 874
                _la = self._input.LA(1)
                if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D0 - 115)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 875
                self.octal_digit()
                self.state = 876
                self.octal_digit()
                pass

            elif la_ == 2:
                self.state = 878
                self.match(PCREParser.Backslash)
                self.state = 879
                self.octal_digit()
                self.state = 880
                self.octal_digit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Octal_digitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Octal_digitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def D0(self):
            return self.getToken(PCREParser.D0, 0)

        def D1(self):
            return self.getToken(PCREParser.D1, 0)

        def D2(self):
            return self.getToken(PCREParser.D2, 0)

        def D3(self):
            return self.getToken(PCREParser.D3, 0)

        def D4(self):
            return self.getToken(PCREParser.D4, 0)

        def D5(self):
            return self.getToken(PCREParser.D5, 0)

        def D6(self):
            return self.getToken(PCREParser.D6, 0)

        def D7(self):
            return self.getToken(PCREParser.D7, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_octal_digit

        def enterRule(self, listener):
            if hasattr(listener, "enterOctal_digit"):
                listener.enterOctal_digit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOctal_digit"):
                listener.exitOctal_digit(self)




    def octal_digit(self):

        localctx = PCREParser.Octal_digitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_octal_digit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            _la = self._input.LA(1)
            if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D4 - 115)) | (1 << (PCREParser.D5 - 115)) | (1 << (PCREParser.D6 - 115)) | (1 << (PCREParser.D7 - 115)) | (1 << (PCREParser.D0 - 115)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DigitsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.DigitsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def digit(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.DigitContext)
            else:
                return self.getTypedRuleContext(PCREParser.DigitContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_digits

        def enterRule(self, listener):
            if hasattr(listener, "enterDigits"):
                listener.enterDigits(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDigits"):
                listener.exitDigits(self)




    def digits(self):

        localctx = PCREParser.DigitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_digits)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 886
                    self.digit()

                else:
                    raise NoViableAltException(self)
                self.state = 889 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DigitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.DigitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def D0(self):
            return self.getToken(PCREParser.D0, 0)

        def D1(self):
            return self.getToken(PCREParser.D1, 0)

        def D2(self):
            return self.getToken(PCREParser.D2, 0)

        def D3(self):
            return self.getToken(PCREParser.D3, 0)

        def D4(self):
            return self.getToken(PCREParser.D4, 0)

        def D5(self):
            return self.getToken(PCREParser.D5, 0)

        def D6(self):
            return self.getToken(PCREParser.D6, 0)

        def D7(self):
            return self.getToken(PCREParser.D7, 0)

        def D8(self):
            return self.getToken(PCREParser.D8, 0)

        def D9(self):
            return self.getToken(PCREParser.D9, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_digit

        def enterRule(self, listener):
            if hasattr(listener, "enterDigit"):
                listener.enterDigit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDigit"):
                listener.exitDigit(self)




    def digit(self):

        localctx = PCREParser.DigitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_digit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            _la = self._input.LA(1)
            if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D4 - 115)) | (1 << (PCREParser.D5 - 115)) | (1 << (PCREParser.D6 - 115)) | (1 << (PCREParser.D7 - 115)) | (1 << (PCREParser.D8 - 115)) | (1 << (PCREParser.D9 - 115)) | (1 << (PCREParser.D0 - 115)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alpha_nums(self):
            return self.getTypedRuleContext(PCREParser.Alpha_numsContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = PCREParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.alpha_nums()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alpha_numsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Alpha_numsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def letter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.LetterContext)
            else:
                return self.getTypedRuleContext(PCREParser.LetterContext,i)


        def Underscore(self, i=None):
            if i is None:
                return self.getTokens(PCREParser.Underscore)
            else:
                return self.getToken(PCREParser.Underscore, i)

        def digit(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.DigitContext)
            else:
                return self.getTypedRuleContext(PCREParser.DigitContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_alpha_nums

        def enterRule(self, listener):
            if hasattr(listener, "enterAlpha_nums"):
                listener.enterAlpha_nums(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlpha_nums"):
                listener.exitAlpha_nums(self)




    def alpha_nums(self):

        localctx = PCREParser.Alpha_numsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alpha_nums)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            token = self._input.LA(1)
            if token in [PCREParser.ALC, PCREParser.BLC, PCREParser.CLC, PCREParser.DLC, PCREParser.ELC, PCREParser.FLC, PCREParser.GLC, PCREParser.HLC, PCREParser.ILC, PCREParser.JLC, PCREParser.KLC, PCREParser.LLC, PCREParser.MLC, PCREParser.NLC, PCREParser.OLC, PCREParser.PLC, PCREParser.QLC, PCREParser.RLC, PCREParser.SLC, PCREParser.TLC, PCREParser.ULC, PCREParser.VLC, PCREParser.WLC, PCREParser.XLC, PCREParser.YLC, PCREParser.ZLC, PCREParser.AUC, PCREParser.BUC, PCREParser.CUC, PCREParser.DUC, PCREParser.EUC, PCREParser.FUC, PCREParser.GUC, PCREParser.HUC, PCREParser.IUC, PCREParser.JUC, PCREParser.KUC, PCREParser.LUC, PCREParser.MUC, PCREParser.NUC, PCREParser.OUC, PCREParser.PUC, PCREParser.QUC, PCREParser.RUC, PCREParser.SUC, PCREParser.TUC, PCREParser.UUC, PCREParser.VUC, PCREParser.WUC, PCREParser.XUC, PCREParser.YUC, PCREParser.ZUC]:
                self.state = 895
                self.letter()

            elif token in [PCREParser.Underscore]:
                self.state = 896
                self.match(PCREParser.Underscore)

            else:
                raise NoViableAltException(self)

            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PCREParser.Underscore or _la==PCREParser.ALC or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)))) != 0):
                self.state = 902
                token = self._input.LA(1)
                if token in [PCREParser.ALC, PCREParser.BLC, PCREParser.CLC, PCREParser.DLC, PCREParser.ELC, PCREParser.FLC, PCREParser.GLC, PCREParser.HLC, PCREParser.ILC, PCREParser.JLC, PCREParser.KLC, PCREParser.LLC, PCREParser.MLC, PCREParser.NLC, PCREParser.OLC, PCREParser.PLC, PCREParser.QLC, PCREParser.RLC, PCREParser.SLC, PCREParser.TLC, PCREParser.ULC, PCREParser.VLC, PCREParser.WLC, PCREParser.XLC, PCREParser.YLC, PCREParser.ZLC, PCREParser.AUC, PCREParser.BUC, PCREParser.CUC, PCREParser.DUC, PCREParser.EUC, PCREParser.FUC, PCREParser.GUC, PCREParser.HUC, PCREParser.IUC, PCREParser.JUC, PCREParser.KUC, PCREParser.LUC, PCREParser.MUC, PCREParser.NUC, PCREParser.OUC, PCREParser.PUC, PCREParser.QUC, PCREParser.RUC, PCREParser.SUC, PCREParser.TUC, PCREParser.UUC, PCREParser.VUC, PCREParser.WUC, PCREParser.XUC, PCREParser.YUC, PCREParser.ZUC]:
                    self.state = 899
                    self.letter()

                elif token in [PCREParser.Underscore]:
                    self.state = 900
                    self.match(PCREParser.Underscore)

                elif token in [PCREParser.D1, PCREParser.D2, PCREParser.D3, PCREParser.D4, PCREParser.D5, PCREParser.D6, PCREParser.D7, PCREParser.D8, PCREParser.D9, PCREParser.D0]:
                    self.state = 901
                    self.digit()

                else:
                    raise NoViableAltException(self)

                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_close_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Non_close_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def non_close_paren(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Non_close_parenContext)
            else:
                return self.getTypedRuleContext(PCREParser.Non_close_parenContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_non_close_parens

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_close_parens"):
                listener.enterNon_close_parens(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_close_parens"):
                listener.exitNon_close_parens(self)




    def non_close_parens(self):

        localctx = PCREParser.Non_close_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_non_close_parens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 907
                self.non_close_paren()
                self.state = 910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.OneDataUnit) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.ExtendedUnicodeChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.CharacterClassEnd) | (1 << PCREParser.Caret) | (1 << PCREParser.Hyphen) | (1 << PCREParser.POSIXNamedSet) | (1 << PCREParser.POSIXNegatedNamedSet) | (1 << PCREParser.QuestionMark) | (1 << PCREParser.Plus) | (1 << PCREParser.Star) | (1 << PCREParser.OpenBrace) | (1 << PCREParser.CloseBrace) | (1 << PCREParser.Comma) | (1 << PCREParser.WordBoundary) | (1 << PCREParser.NonWordBoundary) | (1 << PCREParser.StartOfSubject) | (1 << PCREParser.EndOfSubjectOrLine) | (1 << PCREParser.EndOfSubjectOrLineEndOfSubject) | (1 << PCREParser.EndOfSubject) | (1 << PCREParser.PreviousMatchInSubject) | (1 << PCREParser.ResetStartMatch) | (1 << PCREParser.SubroutineOrNamedReferenceStartG) | (1 << PCREParser.NamedReferenceStartK) | (1 << PCREParser.Pipe) | (1 << PCREParser.OpenParen) | (1 << PCREParser.LessThan) | (1 << PCREParser.GreaterThan) | (1 << PCREParser.SingleQuote) | (1 << PCREParser.Underscore) | (1 << PCREParser.Colon) | (1 << PCREParser.Hash) | (1 << PCREParser.Equals) | (1 << PCREParser.Exclamation) | (1 << PCREParser.Ampersand) | (1 << PCREParser.ALC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)) | (1 << (PCREParser.HUC - 64)) | (1 << (PCREParser.IUC - 64)) | (1 << (PCREParser.JUC - 64)) | (1 << (PCREParser.KUC - 64)) | (1 << (PCREParser.LUC - 64)) | (1 << (PCREParser.MUC - 64)) | (1 << (PCREParser.NUC - 64)) | (1 << (PCREParser.OUC - 64)) | (1 << (PCREParser.PUC - 64)) | (1 << (PCREParser.QUC - 64)) | (1 << (PCREParser.RUC - 64)) | (1 << (PCREParser.SUC - 64)) | (1 << (PCREParser.TUC - 64)) | (1 << (PCREParser.UUC - 64)) | (1 << (PCREParser.VUC - 64)) | (1 << (PCREParser.WUC - 64)) | (1 << (PCREParser.XUC - 64)) | (1 << (PCREParser.YUC - 64)) | (1 << (PCREParser.ZUC - 64)) | (1 << (PCREParser.D1 - 64)) | (1 << (PCREParser.D2 - 64)) | (1 << (PCREParser.D3 - 64)) | (1 << (PCREParser.D4 - 64)) | (1 << (PCREParser.D5 - 64)) | (1 << (PCREParser.D6 - 64)) | (1 << (PCREParser.D7 - 64)) | (1 << (PCREParser.D8 - 64)) | (1 << (PCREParser.D9 - 64)) | (1 << (PCREParser.D0 - 64)) | (1 << (PCREParser.OtherChar - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_close_parenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.Non_close_parenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CloseParen(self):
            return self.getToken(PCREParser.CloseParen, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_non_close_paren

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_close_paren"):
                listener.enterNon_close_paren(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_close_paren"):
                listener.exitNon_close_paren(self)




    def non_close_paren(self):

        localctx = PCREParser.Non_close_parenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_non_close_paren)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            _la = self._input.LA(1)
            if _la <= 0 or _la==PCREParser.CloseParen:
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PCREParser.LetterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALC(self):
            return self.getToken(PCREParser.ALC, 0)

        def BLC(self):
            return self.getToken(PCREParser.BLC, 0)

        def CLC(self):
            return self.getToken(PCREParser.CLC, 0)

        def DLC(self):
            return self.getToken(PCREParser.DLC, 0)

        def ELC(self):
            return self.getToken(PCREParser.ELC, 0)

        def FLC(self):
            return self.getToken(PCREParser.FLC, 0)

        def GLC(self):
            return self.getToken(PCREParser.GLC, 0)

        def HLC(self):
            return self.getToken(PCREParser.HLC, 0)

        def ILC(self):
            return self.getToken(PCREParser.ILC, 0)

        def JLC(self):
            return self.getToken(PCREParser.JLC, 0)

        def KLC(self):
            return self.getToken(PCREParser.KLC, 0)

        def LLC(self):
            return self.getToken(PCREParser.LLC, 0)

        def MLC(self):
            return self.getToken(PCREParser.MLC, 0)

        def NLC(self):
            return self.getToken(PCREParser.NLC, 0)

        def OLC(self):
            return self.getToken(PCREParser.OLC, 0)

        def PLC(self):
            return self.getToken(PCREParser.PLC, 0)

        def QLC(self):
            return self.getToken(PCREParser.QLC, 0)

        def RLC(self):
            return self.getToken(PCREParser.RLC, 0)

        def SLC(self):
            return self.getToken(PCREParser.SLC, 0)

        def TLC(self):
            return self.getToken(PCREParser.TLC, 0)

        def ULC(self):
            return self.getToken(PCREParser.ULC, 0)

        def VLC(self):
            return self.getToken(PCREParser.VLC, 0)

        def WLC(self):
            return self.getToken(PCREParser.WLC, 0)

        def XLC(self):
            return self.getToken(PCREParser.XLC, 0)

        def YLC(self):
            return self.getToken(PCREParser.YLC, 0)

        def ZLC(self):
            return self.getToken(PCREParser.ZLC, 0)

        def AUC(self):
            return self.getToken(PCREParser.AUC, 0)

        def BUC(self):
            return self.getToken(PCREParser.BUC, 0)

        def CUC(self):
            return self.getToken(PCREParser.CUC, 0)

        def DUC(self):
            return self.getToken(PCREParser.DUC, 0)

        def EUC(self):
            return self.getToken(PCREParser.EUC, 0)

        def FUC(self):
            return self.getToken(PCREParser.FUC, 0)

        def GUC(self):
            return self.getToken(PCREParser.GUC, 0)

        def HUC(self):
            return self.getToken(PCREParser.HUC, 0)

        def IUC(self):
            return self.getToken(PCREParser.IUC, 0)

        def JUC(self):
            return self.getToken(PCREParser.JUC, 0)

        def KUC(self):
            return self.getToken(PCREParser.KUC, 0)

        def LUC(self):
            return self.getToken(PCREParser.LUC, 0)

        def MUC(self):
            return self.getToken(PCREParser.MUC, 0)

        def NUC(self):
            return self.getToken(PCREParser.NUC, 0)

        def OUC(self):
            return self.getToken(PCREParser.OUC, 0)

        def PUC(self):
            return self.getToken(PCREParser.PUC, 0)

        def QUC(self):
            return self.getToken(PCREParser.QUC, 0)

        def RUC(self):
            return self.getToken(PCREParser.RUC, 0)

        def SUC(self):
            return self.getToken(PCREParser.SUC, 0)

        def TUC(self):
            return self.getToken(PCREParser.TUC, 0)

        def UUC(self):
            return self.getToken(PCREParser.UUC, 0)

        def VUC(self):
            return self.getToken(PCREParser.VUC, 0)

        def WUC(self):
            return self.getToken(PCREParser.WUC, 0)

        def XUC(self):
            return self.getToken(PCREParser.XUC, 0)

        def YUC(self):
            return self.getToken(PCREParser.YUC, 0)

        def ZUC(self):
            return self.getToken(PCREParser.ZUC, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_letter

        def enterRule(self, listener):
            if hasattr(listener, "enterLetter"):
                listener.enterLetter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLetter"):
                listener.exitLetter(self)




    def letter(self):

        localctx = PCREParser.LetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_letter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            _la = self._input.LA(1)
            if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (PCREParser.ALC - 63)) | (1 << (PCREParser.BLC - 63)) | (1 << (PCREParser.CLC - 63)) | (1 << (PCREParser.DLC - 63)) | (1 << (PCREParser.ELC - 63)) | (1 << (PCREParser.FLC - 63)) | (1 << (PCREParser.GLC - 63)) | (1 << (PCREParser.HLC - 63)) | (1 << (PCREParser.ILC - 63)) | (1 << (PCREParser.JLC - 63)) | (1 << (PCREParser.KLC - 63)) | (1 << (PCREParser.LLC - 63)) | (1 << (PCREParser.MLC - 63)) | (1 << (PCREParser.NLC - 63)) | (1 << (PCREParser.OLC - 63)) | (1 << (PCREParser.PLC - 63)) | (1 << (PCREParser.QLC - 63)) | (1 << (PCREParser.RLC - 63)) | (1 << (PCREParser.SLC - 63)) | (1 << (PCREParser.TLC - 63)) | (1 << (PCREParser.ULC - 63)) | (1 << (PCREParser.VLC - 63)) | (1 << (PCREParser.WLC - 63)) | (1 << (PCREParser.XLC - 63)) | (1 << (PCREParser.YLC - 63)) | (1 << (PCREParser.ZLC - 63)) | (1 << (PCREParser.AUC - 63)) | (1 << (PCREParser.BUC - 63)) | (1 << (PCREParser.CUC - 63)) | (1 << (PCREParser.DUC - 63)) | (1 << (PCREParser.EUC - 63)) | (1 << (PCREParser.FUC - 63)) | (1 << (PCREParser.GUC - 63)) | (1 << (PCREParser.HUC - 63)) | (1 << (PCREParser.IUC - 63)) | (1 << (PCREParser.JUC - 63)) | (1 << (PCREParser.KUC - 63)) | (1 << (PCREParser.LUC - 63)) | (1 << (PCREParser.MUC - 63)) | (1 << (PCREParser.NUC - 63)) | (1 << (PCREParser.OUC - 63)) | (1 << (PCREParser.PUC - 63)) | (1 << (PCREParser.QUC - 63)) | (1 << (PCREParser.RUC - 63)) | (1 << (PCREParser.SUC - 63)) | (1 << (PCREParser.TUC - 63)) | (1 << (PCREParser.UUC - 63)) | (1 << (PCREParser.VUC - 63)) | (1 << (PCREParser.WUC - 63)) | (1 << (PCREParser.XUC - 63)) | (1 << (PCREParser.YUC - 63)) | (1 << (PCREParser.ZUC - 63)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





